[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.1","content-config-digest","140f944983e38ae0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://mikesusz.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":true,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,29,30,46,47,93,94,110,111,128,129,145,146,162,163,176,177,193,194,248,249,264,265,278,279,295,296,304,305,333,334],"astro-again",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21,"legacyId":28},{"title":14,"description":15,"pubDate":16,"draft":17},"Astro, again!","With the 1.0 beta of Astro being available, I decided it was time to finally upgrade this site. Please forgive the dust, there's been a lot of work under the hood.",["Date","2022-07-20T04:00:00.000Z"],false,"I've been putting off making big changes to the site as [Astro](https://astro.build) (the framework that this site is built with) has been evolving rapidly, and there have been several breaking changes that forced me to spend an inordinate amount of time fixing plumbing instead of actually doing more writing.\n\nThis is a common ailment of the modern, fast moving web development space. I have other sites that remain neglected because of huge breaking changes in their frameworks, and I've become averse to spend what little time I have available sorting out dependencies, and fixing problems I didn't create.\n\nOf course this means that the longer I go without adapting my custom code to new versions of frameworks, the more it is out of date, may contain outdated dependencies that contain security vulnerabilities, and generally becomes stagnant. The effort to upgrade gets larger with each generation also, as migration paths are usually not designed to transition across several major versions at once.\n\nAll this said, I've almost entirely thrown out the old custom code that I had written on top of Astro, and reinstalled it from scratch using the 1.0-beta and started again from the starter blog templates. Hopefully now that Astro is so close to a 1.0 release, future updates will have less complex changes and won't require major rewrites to upgrade.\n\nNow, Onward!","src/content/blog/astro-again.md","9b48272a11178078",{"html":22,"metadata":23},"\u003Cp>I’ve been putting off making big changes to the site as \u003Ca href=\"https://astro.build\">Astro\u003C/a> (the framework that this site is built with) has been evolving rapidly, and there have been several breaking changes that forced me to spend an inordinate amount of time fixing plumbing instead of actually doing more writing.\u003C/p>\n\u003Cp>This is a common ailment of the modern, fast moving web development space. I have other sites that remain neglected because of huge breaking changes in their frameworks, and I’ve become averse to spend what little time I have available sorting out dependencies, and fixing problems I didn’t create.\u003C/p>\n\u003Cp>Of course this means that the longer I go without adapting my custom code to new versions of frameworks, the more it is out of date, may contain outdated dependencies that contain security vulnerabilities, and generally becomes stagnant. The effort to upgrade gets larger with each generation also, as migration paths are usually not designed to transition across several major versions at once.\u003C/p>\n\u003Cp>All this said, I’ve almost entirely thrown out the old custom code that I had written on top of Astro, and reinstalled it from scratch using the 1.0-beta and started again from the starter blog templates. Hopefully now that Astro is so close to a 1.0 release, future updates will have less complex changes and won’t require major rewrites to upgrade.\u003C/p>\n\u003Cp>Now, Onward!\u003C/p>",{"headings":24,"imagePaths":25,"frontmatter":26},[],[],{"title":14,"description":15,"pubDate":27,"draft":17},"20 Jul 2022","astro-again.md","astro",{"id":29,"data":31,"body":35,"filePath":36,"digest":37,"rendered":38,"legacyId":45},{"title":32,"description":33,"pubDate":34,"draft":17},"Astro.build","To get greater functionality and flexibility, I rebuilt this site using Astro.",["Date","2021-10-11T04:00:00.000Z"],"As much fun as quickly standing this site up was with flat HTML and Tailwind, I need to get my hands moving with React on a regular basis. I recently rebuilt this site with \u003Ca href=\"https://astro.build/\">Astro\u003C/a>. I'm also a big fan of Markdown for longer-form writing, so I \u003Cstrike>hope to incorporate\u003C/strike> just built a Markdown-based publishing flow for pieces I write here.\n\nAstro has been fun to work with, although a bit challenging when trying to upgrade, as the library itself is in an early stage of its evolution, so breaking changes are happening fairly often. As this approaches release 1.0, those should become less frequent and make this a more sustainable platform for a wider audience of users.","src/content/blog/astro.md","73894606c5835d54",{"html":39,"metadata":40},"\u003Cp>As much fun as quickly standing this site up was with flat HTML and Tailwind, I need to get my hands moving with React on a regular basis. I recently rebuilt this site with \u003Ca href=\"https://astro.build/\">Astro\u003C/a>. I’m also a big fan of Markdown for longer-form writing, so I \u003Cstrike>hope to incorporate\u003C/strike> just built a Markdown-based publishing flow for pieces I write here.\u003C/p>\n\u003Cp>Astro has been fun to work with, although a bit challenging when trying to upgrade, as the library itself is in an early stage of its evolution, so breaking changes are happening fairly often. As this approaches release 1.0, those should become less frequent and make this a more sustainable platform for a wider audience of users.\u003C/p>",{"headings":41,"imagePaths":42,"frontmatter":43},[],[],{"title":32,"description":33,"pubDate":44,"draft":17},"11 Oct 2021","astro.md","coolify-setup",{"id":46,"data":48,"body":53,"filePath":54,"digest":55,"rendered":56,"legacyId":92},{"title":49,"description":50,"pubDate":51,"draft":52},"Coolify Setup","My adventures with moving to(ward) automated self-hosting.",["Date","2025-03-26T04:00:00.000Z"],true,"In the way that internet things sometimes come full-circle, I wanted to move my web hosting back to machines that I control. Here's the story of my journey doing that, and a few pointers to avoid the pitfalls that I fell into.\n\nIf you want to skip the preamble and get right to the Coolify comments, [jump to the end](#enter-coolify)\n\n\u003C!-- a history of my web hosting -->\n\n## Let's start at the beginning\n\nWell, no, let's not spend too much time dwelling on this. When I started publishing web pages, as you can read about in more detail in [other blog posts](/blog/dont-forget), it involved having a `public_html` directory on a Unix machine. This heavy iron was usually provided by a college or an employer (or both). This was not super convenient, but generally I edited the files in place, or edited them locally and FTP[^ftp]'d them up. (passwords flying around in plain text? the internet used to be WILD y'all)\n\n\u003C!-- shared hosting - better, but not ideal -->\n\n## No longer free\n\nWhen I left academia I needed to find my own paid web hosting, and this is the longest era in the history I'm recounting today. The names change as prices change and bundled features change, but they're generally all the same. A big shared server where you and several (many?) other customers upload your files and one box serves them all. As long as everyone doesn't get slashdotted[^slashdot] all at once, This metal can usually handle the load of having so many domains pointing at it.\n\n\u003C!-- h4x0rZ -->\n\nBut this situation is fraught. On several occasions, shared hosting servers that I had my websites on were hacked, and even my own sites were not immune. Typically this happens when a web host allows shell logins and an unscrupulous user can traverse directories, trying to find one that someone flagged with the wrong permissions (specifically - allowing _any_ user on the system to *write* files as opposed to just *read*ing them).\n\nAll a h4x0r had to do was copy a .php file through the local filesystem into _your_ directory, then hit it from the web, and bingo! They were executing their own code via _your_ website, with _your_ user and _your_ permissions, allowing them to do mean things to _your_ WordPress database and basically cause you headaches for days/weeks/months. (Yes, I was both the victim of this, and spent a lot of time cleaning it up, and ... was a consultant cleaning this up for other people/companies)\n\n\u003C!-- automated build and deploy platforms - nice -->\n\n## Moving away from dynamics\n\nOne way to thwart these kinds of vulnerabilities is for the website itself to be immutable. This is kind of like how we did things early on (edit static files) in that it doesn't rely on executing code to build webpages from templates + content from a database. You can still create content quickly, writing the content section of new blog posts or pages using local editors, but then running a build process to generate the final assets of the site -- Static Site Generation tools arose that satisfied our need for (near) immediacy, but didn't rely on just-in-time compiled web pages that had performance and security implications.\n\n\u003C!-- Why not automate ALL THE THINGS -->\n\n## The Cart and the Horse\n\nSo running build tools on your local machine to generate a static website and upload it to the server was neat, but why don't we cut out the middleman? Your code is in a remote repository (probably GitHub) your website is on a shared or cloud hosted server somewhere, all we need is to run that build _in the cloud_ also, and we no longer have to do it locally (which sometimes had its own problems depending on your local platform, and other boring issues).\n\nEnter services like the one I used previously, [Netlify](https://www.netlify.com/). I can't say anything bad about them, it's a great service. You connect it to your GitHub account, it can pull from a branch in your repository, build your website, deploy it and host it! And for a bonus, it watches for Pull Requests to your main branch, and can make test sites for each PR. I was happy with this for a while.\n\n\u003C!-- CEOs are bros ruin everything -->\n\n### What Changed?\n\n\"It's not you, it's me?\" comes to mind. I've never been comfortable getting a commercial service for free. There's usually a catch. Companies sometimes have to change their policies to do more creepy things in order to derive profit from the 'free' service they're offering you. And I'm not saying that Netlify did anything creepy, but I just felt more comfortable taking over this responsibility myself, since I had the resources and the knowledge. And what I didn't know already -- I wanted to learn.\n\n\u003C!-- Can you roll-your-own magic? -->\n\n## Enter Coolify\n\nObviously from the name, [Coolify](https://coolify.io/) seems like it's meant as an alternative to services like Netlify. They have a paid, hosted product that is very similar. But you can also install the same code on your own infrastructure and host it yourself.\n\nI already had a server at [Linode](https://linode.com) that I used for various things. I added a second Linode to host and manage a lot of sites using Coolify. It runs in [Docker](https://www.docker.com/), and in turn creates a Docker instance for each of the websites you configure. This means that you can customize configurations for each if you need to. (It also creates a few more Docker instances for various purposes that you don't really have to dig into unless you want)\n\nSome of my sites are static HTML. Some of my sites are built using Astro (like the one you're reading!). One of my sites is WordPress for now, which is handled in Coolify by creating a Docker for mysql and another for the front-end. (and having my WordPress db over here allows me to build a different front-end to pull data from mysql, and eventually migrate off of WordPress while still being able to serve all that old content).\n\nI should clarify - I am doing all of this configuration in the Coolify UI. The only thing I did in a shell was run the setup script (which you can pipe to bash [as per the Coolify getting started instructions](https://coolify.io/self-hosted/) or download it and read through it before executing)\n\n## It was easy, but...\n\nNot everything was super straightforward, but I now have it up and running eleven websites with more planned as I get to them. Some of these I had hosted elsewhere on a shared server (that I'm anxious to migrate away from, with the concerns mentioned previously) and others were on my first Linode but I was manually updating them from the git repository LIKE AN ANIMAL.\n\nMy biggest issue? I was too cheap. Well, frugal. The default build pack in Coolify is [Nixpacks](https://nixpacks.com/docs/how-it-works). I was unaware of what this was or did, and I won't get into the details of it but let's just say it's resource-intensive. On my little Linode 2GB instance my deploys were failing sometimes, causing CPU spikes and eventually Linode's watcher-bots rebooted my server.\n\nAfter all of my troubleshooting and hair-pulling and freaking out ... I hadn't configured enough swap space. Swap is what the operating system uses to temporarily store files that it is actively using when it runs out of real physical memory. Since Nixpacks uses a lot of library files, it was exceeding the available portion of real memory and without anywhere else to store those in-use files, it was causing problems. So, that's really the biggest caveat: **give your server more swap**. I changed mine from 512MB to 2GB (to match the amount of physical memory available) and haven't had a problem since.\n\n## You can do it, too!\n\nLastly I'll advise that you can do this too, if you have the technical skills, or at least the patience to read through the documentation and follow example. And if you get really stuck they have a Discord full of helpful people who can probably guide you.\n\n---\n\n[^ftp]: FTP is [File Transfer Protocol](https://en.wikipedia.org/wiki/File_Transfer_Protocol), one of the oldest ways to move files around on the internet. The basic implementation involved sending authentication credentials unencrypted, so a network administrator or devious local user could spy on this traffic and steal your username and password. I added this footnote when I realized that some of my readers would be too young to have ever used FTP. 👴\n\n[^slashdot]: being 'slashdotted' or '[the slashdot effect](https://en.wikipedia.org/wiki/Slashdot_effect)' was a phenomena wherein the biggest link-blog of the time, [slashdot.org](https://slashdot.org/), would link to your site for some reason (usually good!) but the sudden, enormous increase in traffic from slashdot readers would murder your server. this only happened to me once.","src/content/blog/coolify-setup.md","b9d618b27c76de6a",{"html":57,"metadata":58},"\u003Cp>In the way that internet things sometimes come full-circle, I wanted to move my web hosting back to machines that I control. Here’s the story of my journey doing that, and a few pointers to avoid the pitfalls that I fell into.\u003C/p>\n\u003Cp>If you want to skip the preamble and get right to the Coolify comments, \u003Ca href=\"#enter-coolify\">jump to the end\u003C/a>\u003C/p>\n\u003C!-- a history of my web hosting -->\n\u003Ch2 id=\"lets-start-at-the-beginning\">Let’s start at the beginning\u003C/h2>\n\u003Cp>Well, no, let’s not spend too much time dwelling on this. When I started publishing web pages, as you can read about in more detail in \u003Ca href=\"/blog/dont-forget\">other blog posts\u003C/a>, it involved having a \u003Ccode>public_html\u003C/code> directory on a Unix machine. This heavy iron was usually provided by a college or an employer (or both). This was not super convenient, but generally I edited the files in place, or edited them locally and FTP\u003Csup>\u003Ca href=\"#user-content-fn-ftp\" id=\"user-content-fnref-ftp\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>’d them up. (passwords flying around in plain text? the internet used to be WILD y’all)\u003C/p>\n\u003C!-- shared hosting - better, but not ideal -->\n\u003Ch2 id=\"no-longer-free\">No longer free\u003C/h2>\n\u003Cp>When I left academia I needed to find my own paid web hosting, and this is the longest era in the history I’m recounting today. The names change as prices change and bundled features change, but they’re generally all the same. A big shared server where you and several (many?) other customers upload your files and one box serves them all. As long as everyone doesn’t get slashdotted\u003Csup>\u003Ca href=\"#user-content-fn-slashdot\" id=\"user-content-fnref-slashdot\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup> all at once, This metal can usually handle the load of having so many domains pointing at it.\u003C/p>\n\u003C!-- h4x0rZ -->\n\u003Cp>But this situation is fraught. On several occasions, shared hosting servers that I had my websites on were hacked, and even my own sites were not immune. Typically this happens when a web host allows shell logins and an unscrupulous user can traverse directories, trying to find one that someone flagged with the wrong permissions (specifically - allowing \u003Cem>any\u003C/em> user on the system to \u003Cem>write\u003C/em> files as opposed to just \u003Cem>read\u003C/em>ing them).\u003C/p>\n\u003Cp>All a h4x0r had to do was copy a .php file through the local filesystem into \u003Cem>your\u003C/em> directory, then hit it from the web, and bingo! They were executing their own code via \u003Cem>your\u003C/em> website, with \u003Cem>your\u003C/em> user and \u003Cem>your\u003C/em> permissions, allowing them to do mean things to \u003Cem>your\u003C/em> WordPress database and basically cause you headaches for days/weeks/months. (Yes, I was both the victim of this, and spent a lot of time cleaning it up, and … was a consultant cleaning this up for other people/companies)\u003C/p>\n\u003C!-- automated build and deploy platforms - nice -->\n\u003Ch2 id=\"moving-away-from-dynamics\">Moving away from dynamics\u003C/h2>\n\u003Cp>One way to thwart these kinds of vulnerabilities is for the website itself to be immutable. This is kind of like how we did things early on (edit static files) in that it doesn’t rely on executing code to build webpages from templates + content from a database. You can still create content quickly, writing the content section of new blog posts or pages using local editors, but then running a build process to generate the final assets of the site — Static Site Generation tools arose that satisfied our need for (near) immediacy, but didn’t rely on just-in-time compiled web pages that had performance and security implications.\u003C/p>\n\u003C!-- Why not automate ALL THE THINGS -->\n\u003Ch2 id=\"the-cart-and-the-horse\">The Cart and the Horse\u003C/h2>\n\u003Cp>So running build tools on your local machine to generate a static website and upload it to the server was neat, but why don’t we cut out the middleman? Your code is in a remote repository (probably GitHub) your website is on a shared or cloud hosted server somewhere, all we need is to run that build \u003Cem>in the cloud\u003C/em> also, and we no longer have to do it locally (which sometimes had its own problems depending on your local platform, and other boring issues).\u003C/p>\n\u003Cp>Enter services like the one I used previously, \u003Ca href=\"https://www.netlify.com/\">Netlify\u003C/a>. I can’t say anything bad about them, it’s a great service. You connect it to your GitHub account, it can pull from a branch in your repository, build your website, deploy it and host it! And for a bonus, it watches for Pull Requests to your main branch, and can make test sites for each PR. I was happy with this for a while.\u003C/p>\n\u003C!-- CEOs are bros ruin everything -->\n\u003Ch3 id=\"what-changed\">What Changed?\u003C/h3>\n\u003Cp>“It’s not you, it’s me?” comes to mind. I’ve never been comfortable getting a commercial service for free. There’s usually a catch. Companies sometimes have to change their policies to do more creepy things in order to derive profit from the ‘free’ service they’re offering you. And I’m not saying that Netlify did anything creepy, but I just felt more comfortable taking over this responsibility myself, since I had the resources and the knowledge. And what I didn’t know already — I wanted to learn.\u003C/p>\n\u003C!-- Can you roll-your-own magic? -->\n\u003Ch2 id=\"enter-coolify\">Enter Coolify\u003C/h2>\n\u003Cp>Obviously from the name, \u003Ca href=\"https://coolify.io/\">Coolify\u003C/a> seems like it’s meant as an alternative to services like Netlify. They have a paid, hosted product that is very similar. But you can also install the same code on your own infrastructure and host it yourself.\u003C/p>\n\u003Cp>I already had a server at \u003Ca href=\"https://linode.com\">Linode\u003C/a> that I used for various things. I added a second Linode to host and manage a lot of sites using Coolify. It runs in \u003Ca href=\"https://www.docker.com/\">Docker\u003C/a>, and in turn creates a Docker instance for each of the websites you configure. This means that you can customize configurations for each if you need to. (It also creates a few more Docker instances for various purposes that you don’t really have to dig into unless you want)\u003C/p>\n\u003Cp>Some of my sites are static HTML. Some of my sites are built using Astro (like the one you’re reading!). One of my sites is WordPress for now, which is handled in Coolify by creating a Docker for mysql and another for the front-end. (and having my WordPress db over here allows me to build a different front-end to pull data from mysql, and eventually migrate off of WordPress while still being able to serve all that old content).\u003C/p>\n\u003Cp>I should clarify - I am doing all of this configuration in the Coolify UI. The only thing I did in a shell was run the setup script (which you can pipe to bash \u003Ca href=\"https://coolify.io/self-hosted/\">as per the Coolify getting started instructions\u003C/a> or download it and read through it before executing)\u003C/p>\n\u003Ch2 id=\"it-was-easy-but\">It was easy, but…\u003C/h2>\n\u003Cp>Not everything was super straightforward, but I now have it up and running eleven websites with more planned as I get to them. Some of these I had hosted elsewhere on a shared server (that I’m anxious to migrate away from, with the concerns mentioned previously) and others were on my first Linode but I was manually updating them from the git repository LIKE AN ANIMAL.\u003C/p>\n\u003Cp>My biggest issue? I was too cheap. Well, frugal. The default build pack in Coolify is \u003Ca href=\"https://nixpacks.com/docs/how-it-works\">Nixpacks\u003C/a>. I was unaware of what this was or did, and I won’t get into the details of it but let’s just say it’s resource-intensive. On my little Linode 2GB instance my deploys were failing sometimes, causing CPU spikes and eventually Linode’s watcher-bots rebooted my server.\u003C/p>\n\u003Cp>After all of my troubleshooting and hair-pulling and freaking out … I hadn’t configured enough swap space. Swap is what the operating system uses to temporarily store files that it is actively using when it runs out of real physical memory. Since Nixpacks uses a lot of library files, it was exceeding the available portion of real memory and without anywhere else to store those in-use files, it was causing problems. So, that’s really the biggest caveat: \u003Cstrong>give your server more swap\u003C/strong>. I changed mine from 512MB to 2GB (to match the amount of physical memory available) and haven’t had a problem since.\u003C/p>\n\u003Ch2 id=\"you-can-do-it-too\">You can do it, too!\u003C/h2>\n\u003Cp>Lastly I’ll advise that you can do this too, if you have the technical skills, or at least the patience to read through the documentation and follow example. And if you get really stuck they have a Discord full of helpful people who can probably guide you.\u003C/p>\n\u003Chr>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-ftp\">\n\u003Cp>FTP is \u003Ca href=\"https://en.wikipedia.org/wiki/File_Transfer_Protocol\">File Transfer Protocol\u003C/a>, one of the oldest ways to move files around on the internet. The basic implementation involved sending authentication credentials unencrypted, so a network administrator or devious local user could spy on this traffic and steal your username and password. I added this footnote when I realized that some of my readers would be too young to have ever used FTP. 👴 \u003Ca href=\"#user-content-fnref-ftp\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-slashdot\">\n\u003Cp>being ‘slashdotted’ or ‘\u003Ca href=\"https://en.wikipedia.org/wiki/Slashdot_effect\">the slashdot effect\u003C/a>’ was a phenomena wherein the biggest link-blog of the time, \u003Ca href=\"https://slashdot.org/\">slashdot.org\u003C/a>, would link to your site for some reason (usually good!) but the sudden, enormous increase in traffic from slashdot readers would murder your server. this only happened to me once. \u003Ca href=\"#user-content-fnref-slashdot\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":59,"imagePaths":89,"frontmatter":90},[60,64,67,70,73,77,80,83,86],{"depth":61,"slug":62,"text":63},2,"lets-start-at-the-beginning","Let’s start at the beginning",{"depth":61,"slug":65,"text":66},"no-longer-free","No longer free",{"depth":61,"slug":68,"text":69},"moving-away-from-dynamics","Moving away from dynamics",{"depth":61,"slug":71,"text":72},"the-cart-and-the-horse","The Cart and the Horse",{"depth":74,"slug":75,"text":76},3,"what-changed","What Changed?",{"depth":61,"slug":78,"text":79},"enter-coolify","Enter Coolify",{"depth":61,"slug":81,"text":82},"it-was-easy-but","It was easy, but…",{"depth":61,"slug":84,"text":85},"you-can-do-it-too","You can do it, too!",{"depth":61,"slug":87,"text":88},"footnote-label","Footnotes",[],{"title":49,"description":50,"pubDate":91,"draft":52},"26 Mar 2025","coolify-setup.md","carbon-design",{"id":93,"data":95,"body":99,"filePath":100,"digest":101,"rendered":102,"legacyId":109},{"title":96,"description":97,"pubDate":98,"draft":17},"Carbon Design System","One of the ways I got my hands moving in React again was to repeat the Carbon Design System - React tutorial, this time around with my personal account.",["Date","2021-10-20T04:00:00.000Z"],"While I've been using [Carbon Design System](https://www.carbondesignsystem.com/) at work, I didn't have anything I could demonstrate on my personal account. Everything I've built for [IBM](https://www.ibm.com/) lives in Enterprise Github, and heck - I can't even log into the user-facing side of the application anymore (being the Scrum Master as well as the Security & Compliance focal, I created sprint tasks to delete all of my accounts after I was no longer on the team!)\n\nSo to have some record of my experience using it, I completed the [Carbon Design System Tutorial](https://www.carbondesignsystem.com/developing/react-tutorial/overview/) and earned the credential: _IBM Carbon Design System Developer Essentials - React_ on [my profile at Credly](https://www.credly.com/users/michael-susz/badges). I think I'm going to start building a new fun side project with Carbon as well - I will post about it here when I'm ready to share.\n\nWhile I'm somewhat partial to Carbon since I've used it so recently, I think _using_ a Design System is probably more important than _which particular one you use._ A long time ago at Washington Mutual (RIP), I was part of a small team that created a Pattern Library for reusable compoments -- we agreed this was the best method for us to have consistent experiences for our users, while publishing the best, most compatible and most accessible code.","src/content/blog/carbon-design.md","ae885f0220ee5428",{"html":103,"metadata":104},"\u003Cp>While I’ve been using \u003Ca href=\"https://www.carbondesignsystem.com/\">Carbon Design System\u003C/a> at work, I didn’t have anything I could demonstrate on my personal account. Everything I’ve built for \u003Ca href=\"https://www.ibm.com/\">IBM\u003C/a> lives in Enterprise Github, and heck - I can’t even log into the user-facing side of the application anymore (being the Scrum Master as well as the Security &#x26; Compliance focal, I created sprint tasks to delete all of my accounts after I was no longer on the team!)\u003C/p>\n\u003Cp>So to have some record of my experience using it, I completed the \u003Ca href=\"https://www.carbondesignsystem.com/developing/react-tutorial/overview/\">Carbon Design System Tutorial\u003C/a> and earned the credential: \u003Cem>IBM Carbon Design System Developer Essentials - React\u003C/em> on \u003Ca href=\"https://www.credly.com/users/michael-susz/badges\">my profile at Credly\u003C/a>. I think I’m going to start building a new fun side project with Carbon as well - I will post about it here when I’m ready to share.\u003C/p>\n\u003Cp>While I’m somewhat partial to Carbon since I’ve used it so recently, I think \u003Cem>using\u003C/em> a Design System is probably more important than \u003Cem>which particular one you use.\u003C/em> A long time ago at Washington Mutual (RIP), I was part of a small team that created a Pattern Library for reusable compoments — we agreed this was the best method for us to have consistent experiences for our users, while publishing the best, most compatible and most accessible code.\u003C/p>",{"headings":105,"imagePaths":106,"frontmatter":107},[],[],{"title":96,"draft":17,"description":97,"pubDate":108},"20 Oct 2021","carbon-design.md","first-post",{"id":110,"data":112,"body":117,"filePath":118,"digest":119,"rendered":120,"legacyId":127},{"title":113,"description":114,"pubDate":115,"heroImage":116,"draft":52},"First post","Lorem ipsum dolor sit amet",["Date","2022-07-08T04:00:00.000Z"],"/placeholder-hero.jpg","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.\n\nMorbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.\n\nMollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.\n\nMattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.\n\nTempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.","src/content/blog/first-post.md","7c4e57a397ff3653",{"html":121,"metadata":122},"\u003Cp>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.\u003C/p>\n\u003Cp>Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.\u003C/p>\n\u003Cp>Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.\u003C/p>\n\u003Cp>Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.\u003C/p>\n\u003Cp>Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.\u003C/p>",{"headings":123,"imagePaths":124,"frontmatter":125},[],[],{"title":113,"description":114,"pubDate":126,"heroImage":116,"draft":52},"Jul 08 2022","first-post.md","chakra-ui",{"id":128,"data":130,"body":134,"filePath":135,"digest":136,"rendered":137,"legacyId":144},{"title":131,"description":132,"pubDate":133,"draft":17},"Chakra UI","I built a prototype for an IBM client using Chakra-UI",["Date","2022-07-14T04:00:00.000Z"],"In late May, I was assigned to an IBM Consulting client in New York City. This meant my first onsite assignment (ever), my first time back in any office in more than two years, and also one of my biggest challenges so far at this job.\n\nThe client's first big need was to build a prototype of app that could be used to demo to stakeholders and secure additional support and funding. Once I was fully onboarded, I had just over 3 weeks to build it.\n\nI knew that using a framework would speed delivery of a consistent UI across multiple pages of the app, and I considered other frameworks before settling on \u003Ca href=\"https://chakra-ui.com/\">Chakra-UI\u003C/a>.\n\nWhy not something more \"mainstream?\" I'm glad you asked. My selection was based on the following criteria:\n\nChakra is:\n- fast to develop with\n- built on a standard of attrbibutes that is intuitive; after looking up the shorthand for a few properties I was trying to add, I was able to guess others without having to go back to the docs\n- simple enough to get started, and continue at that level, or learn more advanced functionality\n\nChakra is not:\n- super opinionated about the look of UI elements. it looks basic on purpose\n- gate-keepy. you don't have to learn advanced syntax in order to make anything work. and it doesn't block or replace normal CSS. it feels like an extension to the knowledge you already have of CSS\n\nI figured other benefits as well that didn't come into play until later. Want to add more developers to the project? Just point them to the docs, they're great.\n\nThe conclusion to the story is predictable, but to spell it out: the 'living' prototype was a hit, the demo went well, the project continues. For a lot of complicated reasons (\"enterprise\") the production site wasn't built using Chakra. But for a smaller company or project, or one with more green-field autonomy, this could have easily become the codebase for the \"real\" version.","src/content/blog/chakra-ui.md","66fe51e883baf0a2",{"html":138,"metadata":139},"\u003Cp>In late May, I was assigned to an IBM Consulting client in New York City. This meant my first onsite assignment (ever), my first time back in any office in more than two years, and also one of my biggest challenges so far at this job.\u003C/p>\n\u003Cp>The client’s first big need was to build a prototype of app that could be used to demo to stakeholders and secure additional support and funding. Once I was fully onboarded, I had just over 3 weeks to build it.\u003C/p>\n\u003Cp>I knew that using a framework would speed delivery of a consistent UI across multiple pages of the app, and I considered other frameworks before settling on \u003Ca href=\"https://chakra-ui.com/\">Chakra-UI\u003C/a>.\u003C/p>\n\u003Cp>Why not something more “mainstream?” I’m glad you asked. My selection was based on the following criteria:\u003C/p>\n\u003Cp>Chakra is:\u003C/p>\n\u003Cul>\n\u003Cli>fast to develop with\u003C/li>\n\u003Cli>built on a standard of attrbibutes that is intuitive; after looking up the shorthand for a few properties I was trying to add, I was able to guess others without having to go back to the docs\u003C/li>\n\u003Cli>simple enough to get started, and continue at that level, or learn more advanced functionality\u003C/li>\n\u003C/ul>\n\u003Cp>Chakra is not:\u003C/p>\n\u003Cul>\n\u003Cli>super opinionated about the look of UI elements. it looks basic on purpose\u003C/li>\n\u003Cli>gate-keepy. you don’t have to learn advanced syntax in order to make anything work. and it doesn’t block or replace normal CSS. it feels like an extension to the knowledge you already have of CSS\u003C/li>\n\u003C/ul>\n\u003Cp>I figured other benefits as well that didn’t come into play until later. Want to add more developers to the project? Just point them to the docs, they’re great.\u003C/p>\n\u003Cp>The conclusion to the story is predictable, but to spell it out: the ‘living’ prototype was a hit, the demo went well, the project continues. For a lot of complicated reasons (“enterprise”) the production site wasn’t built using Chakra. But for a smaller company or project, or one with more green-field autonomy, this could have easily become the codebase for the “real” version.\u003C/p>",{"headings":140,"imagePaths":141,"frontmatter":142},[],[],{"title":131,"draft":17,"description":132,"pubDate":143},"14 Jul 2022","chakra-ui.md","netlify",{"id":145,"data":147,"body":151,"filePath":152,"digest":153,"rendered":154,"legacyId":161},{"title":148,"description":149,"pubDate":150},"Netlify","When I first set out to build this site, I wanted to learn modern web tooling that was different from the traditional server-based hosting I had used for the first half of my career, and not as heavy as the roll-your-own cloud-hosting DevOps that I had been part of at my last few jobs.",["Date","2021-09-27T04:00:00.000Z"],"(note: this post was written when i was hosting this site on netlify. i have since moved to a different hosting solution.)\n\nI started my career where I had to assemble the physical web server, install the operating system, install the web server software, then physically install the server computer into the Server Room. I moved on to large corporations where other teams handled the infrastructure and deployed the code that Engineering created.\n\nIn my past several jobs, my teams deployed our own code in environments like [AWS](https://aws.amazon.com/), [OpenShift](https://www.redhat.com/en/technologies/cloud-computing/openshift) or [IBM Cloud](https://www.ibm.com/cloud). While I have been tasked with maintaining and using a full CI/CD pipeline at work, I didn't want (or need) this kind of complexity for personal projects.\n\nI felt a need to 'catch up' with modern tools that startups and enthusiasts have been using, so this site is published automatically on [Netlify](https://www.netlify.com/)! The workflow is so simple and cool - when changes are merged to *main* branch, they show up live a short time later (if a successful build has taken place).\n\nBut I know what you're saying, what if I want to see what my changes will look like first? Or have someone else review them before I release it to the entire world. That's where another Netlify feature comes in - when you create a Pull Request in github, it will run a build against your development branch and publish that to a temporary/testing website. You can trying it out in all your browsers/phones, send it to your editor or have your friends check it out before you merge the changes.\n\nIf you're looking for an easy-to-use method to publish a website, this is great! Now that everything is driven from git branches, I can even author new content from my iPad and have it published to my site without needing to wait until I'm at a 'real computer.'","src/content/blog/netlify.md","f0991eecd1c98d28",{"html":155,"metadata":156},"\u003Cp>(note: this post was written when i was hosting this site on netlify. i have since moved to a different hosting solution.)\u003C/p>\n\u003Cp>I started my career where I had to assemble the physical web server, install the operating system, install the web server software, then physically install the server computer into the Server Room. I moved on to large corporations where other teams handled the infrastructure and deployed the code that Engineering created.\u003C/p>\n\u003Cp>In my past several jobs, my teams deployed our own code in environments like \u003Ca href=\"https://aws.amazon.com/\">AWS\u003C/a>, \u003Ca href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift\">OpenShift\u003C/a> or \u003Ca href=\"https://www.ibm.com/cloud\">IBM Cloud\u003C/a>. While I have been tasked with maintaining and using a full CI/CD pipeline at work, I didn’t want (or need) this kind of complexity for personal projects.\u003C/p>\n\u003Cp>I felt a need to ‘catch up’ with modern tools that startups and enthusiasts have been using, so this site is published automatically on \u003Ca href=\"https://www.netlify.com/\">Netlify\u003C/a>! The workflow is so simple and cool - when changes are merged to \u003Cem>main\u003C/em> branch, they show up live a short time later (if a successful build has taken place).\u003C/p>\n\u003Cp>But I know what you’re saying, what if I want to see what my changes will look like first? Or have someone else review them before I release it to the entire world. That’s where another Netlify feature comes in - when you create a Pull Request in github, it will run a build against your development branch and publish that to a temporary/testing website. You can trying it out in all your browsers/phones, send it to your editor or have your friends check it out before you merge the changes.\u003C/p>\n\u003Cp>If you’re looking for an easy-to-use method to publish a website, this is great! Now that everything is driven from git branches, I can even author new content from my iPad and have it published to my site without needing to wait until I’m at a ‘real computer.’\u003C/p>",{"headings":157,"imagePaths":158,"frontmatter":159},[],[],{"title":148,"description":149,"pubDate":160},"27 Sep 2021","netlify.md","second-post",{"id":162,"data":164,"body":117,"filePath":167,"digest":168,"rendered":169,"legacyId":175},{"title":165,"description":114,"pubDate":166,"heroImage":116,"draft":52},"Second post",["Date","2022-07-22T04:00:00.000Z"],"src/content/blog/second-post.md","4d5b1d2da02ada12",{"html":121,"metadata":170},{"headings":171,"imagePaths":172,"frontmatter":173},[],[],{"title":165,"description":114,"pubDate":174,"heroImage":116,"draft":52},"Jul 22 2022","second-post.md","inspired",{"id":176,"data":178,"body":182,"filePath":183,"digest":184,"rendered":185,"legacyId":192},{"title":179,"description":180,"pubDate":181,"draft":17},"Inspired","Now that my site platform of choice has stabilized, I turned my attention to design. This draws much inspiration from my local development environment and visual aesthetic.",["Date","2023-05-10T04:00:00.000Z"],"I haven't felt like this in a long time.\n\nRecently I've spent some time enhancing my local development environment(s), taking advantage of new plugins and resources to increase the speed and accuracy (and dare I say, enjoyment) of my work.\n\nWhile I am sometimes critical of people who constantly spend time tweaking their development environment (doing meta-work but not real work) I realized that my aversion to doing this meant that I dealt with day-to-day task friction that could be eliminated with a bit of maintenance.\n\nFirstly, for development I use [Visual Studio Code (VSCode)](https://code.visualstudio.com/), and the theme I prefer is called [HackTheBox](https://github.com/silofy/hackthebox). I've since continued to unify my development environment by integrating [HackTheBox colors into vim and Windows Terminal](https://github.com/audibleblink/hackthebox.vim). (If you're on Windows and you haven't used [Windows Terminal](https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701), I strongly recommend it. It's modern, customizable, and capable of running multiple shells including bash, via the Windows Subsystem for Linux, or simply using the bash integrated with git-bash)\n\nThen, I got my VSCode settings syncing from my work/client Windows environment to my work Mac environment and my personal Windows and Mac environments (via [settings sync built into VSCode](https://code.visualstudio.com/docs/editor/settings-sync), you can choose to do so via Github or Microsoft accounts).\n\nWhy stop there when we can further unify the appearance of our environments? So I customized my windows environment to use colors from the HackTheBox profile also. I prefer dark environments while working due to eye strain, so I'm really enjoying this aesthetic.\n\nOnce my dev environments were up to speed, I turned my attention to my oft-neglected website (you know what's said about the cobbler's children). My current website platform, [Astro](https://astro.build/), has had a major version upgrade and the between-release changes are getting less impactful. I was able recently to upgrade from 2.0.1 to 2.4.4 and not have anything break - this is excellent. But besides working code, I currently had no design.\n\nI took inspiration from the colors I see every day - HackTheBox highlight colors specifically, you'll see the left side bars are comprised of #9F00FF, #004CFF, #FFAF00, #FF3E3E, #9FEF00 (in linear gradient code that I wrote by hand). The colored bar on the side is a nod to one of my favorite records, New Order's [Blue Monday](https://en.wikipedia.org/wiki/Blue_Monday_%28New_Order_song%29) 12\" single vinyl sleeve (designed to look like a 5-&frac14;\" floppy disk)\n\n![New Order's Blue Monday 12\" Vinyl sleeve](/images/blue-monday.png)\n\nAnd now, as I've said before, _Onward!_\n\n_— mike_","src/content/blog/inspired.md","02934cc153e78135",{"html":186,"metadata":187},"\u003Cp>I haven’t felt like this in a long time.\u003C/p>\n\u003Cp>Recently I’ve spent some time enhancing my local development environment(s), taking advantage of new plugins and resources to increase the speed and accuracy (and dare I say, enjoyment) of my work.\u003C/p>\n\u003Cp>While I am sometimes critical of people who constantly spend time tweaking their development environment (doing meta-work but not real work) I realized that my aversion to doing this meant that I dealt with day-to-day task friction that could be eliminated with a bit of maintenance.\u003C/p>\n\u003Cp>Firstly, for development I use \u003Ca href=\"https://code.visualstudio.com/\">Visual Studio Code (VSCode)\u003C/a>, and the theme I prefer is called \u003Ca href=\"https://github.com/silofy/hackthebox\">HackTheBox\u003C/a>. I’ve since continued to unify my development environment by integrating \u003Ca href=\"https://github.com/audibleblink/hackthebox.vim\">HackTheBox colors into vim and Windows Terminal\u003C/a>. (If you’re on Windows and you haven’t used \u003Ca href=\"https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701\">Windows Terminal\u003C/a>, I strongly recommend it. It’s modern, customizable, and capable of running multiple shells including bash, via the Windows Subsystem for Linux, or simply using the bash integrated with git-bash)\u003C/p>\n\u003Cp>Then, I got my VSCode settings syncing from my work/client Windows environment to my work Mac environment and my personal Windows and Mac environments (via \u003Ca href=\"https://code.visualstudio.com/docs/editor/settings-sync\">settings sync built into VSCode\u003C/a>, you can choose to do so via Github or Microsoft accounts).\u003C/p>\n\u003Cp>Why stop there when we can further unify the appearance of our environments? So I customized my windows environment to use colors from the HackTheBox profile also. I prefer dark environments while working due to eye strain, so I’m really enjoying this aesthetic.\u003C/p>\n\u003Cp>Once my dev environments were up to speed, I turned my attention to my oft-neglected website (you know what’s said about the cobbler’s children). My current website platform, \u003Ca href=\"https://astro.build/\">Astro\u003C/a>, has had a major version upgrade and the between-release changes are getting less impactful. I was able recently to upgrade from 2.0.1 to 2.4.4 and not have anything break - this is excellent. But besides working code, I currently had no design.\u003C/p>\n\u003Cp>I took inspiration from the colors I see every day - HackTheBox highlight colors specifically, you’ll see the left side bars are comprised of #9F00FF, #004CFF, #FFAF00, #FF3E3E, #9FEF00 (in linear gradient code that I wrote by hand). The colored bar on the side is a nod to one of my favorite records, New Order’s \u003Ca href=\"https://en.wikipedia.org/wiki/Blue_Monday_%28New_Order_song%29\">Blue Monday\u003C/a> 12” single vinyl sleeve (designed to look like a 5-¼” floppy disk)\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/blue-monday.png\" alt=\"New Order&#x27;s Blue Monday 12&#x22; Vinyl sleeve\">\u003C/p>\n\u003Cp>And now, as I’ve said before, \u003Cem>Onward!\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>— mike\u003C/em>\u003C/p>",{"headings":188,"imagePaths":189,"frontmatter":190},[],[],{"title":179,"description":180,"pubDate":191,"draft":17},"10 May 2023","inspired.md","dont-forget",{"id":193,"data":195,"body":200,"filePath":201,"digest":202,"rendered":203,"legacyId":247},{"title":196,"description":197,"pubDate":198,"heroImage":199,"heroAlt":196,"draft":17},"Don't Forget - You're Making Web Pages","The Web that was, how we lost our way, and how to fulfill our promise to The Future.",["Date","2024-08-01T04:00:00.000Z"],"/images/dont-forget.webp","As I roll off of an intense assignment at work, I've got a bit of free brain space to reflect on the kind of work we've been doing, how we have done it, and how this affects -- _The Future._\n\n(_about 15 minutes to read, unless you skip all the footnotes_ 😉)\n\n## We have to go back...\n\nIn college, I spent a lot of time in computer labs. Since I was studying Architecture[^WIT] and this was the year 1991[^Nineties], this time was split between PCs running DOS[^DOS] with AutoCAD[^AutoCAD], and VT terminals[^VT220] where I used Pine[^Pine] to send emails to my brother and my friends at different schools (I can send as many messages as I want? to anyone? for free??)\n\n![VT220](/images/DEC_VT220_terminal.webp)\n\nSome time after my account on the VAX[^VAX] was created, I noticed a `'public_html'` directory appear inside my home directory. I asked the lab monitor what that was - and they explained I could put documents in there that could be be seen by other people on the web. (I can make as many web pages as I want? they can be seen by anyone? for free??)\n\nMy first 'homepage' was written with the vi[^VI] editor on a terminal. I usually viewed it (and any other web site I wanted to read) using Lynx[^Lynx].\n\nI was hooked. I didn't know it at the time, but I would ultimately end up dropping out of the Architecture program, and be hired as the first full-time employee Webmaster[^Webmaster] of my college. But I'm getting ahead of myself.\n\nSo here I was, a late teen-turning-twenty-something, with interests and opinions. (they were probably not very good opinions, but that did not deter me.) I created web pages for all of the things i was excited about - TV Shows, Movies, Music. I wrote about my love of these things, I linked to other people's web pages (for free??) who shared the same interests.\n\nEventually, I started to notice `[INLINE]` markup in people's homepages. I asked my friendly lab monitor about that. I must have finally depleted their patience, as they sighed quietly and suggested I 'go check out the Mac[^Mac] lab.'\n\n### When I first saw Mosaic, everything changed\n\n![Screenshot of Mosaic browser](/images/NCSA_Mosaic_Browser_Screenshot.webp)\n\nMosaic[^Mosaic] changed everything for me when I realized that it was possible to embed images, and to add _style_ to your web pages (beyond the **bold** and _italic_ that I had managed to render in Lynx). I was an Architecture student, and my interests in design dovetailed into industrial and graphic design also. Having more control over the presentation of my content appealed to me greatly.\n\n### You can make (almost) anything you want\n\nSo while learning new and different ways to affect the display of my web pages, there was always a retropective step -- \"Does this still work in Lynx?\" Why would we care so much? **We refused to sacrifice access to our content in the pursuit of something new and shiny.** We always checked in other/older browsers.\n\n**We hand-wrote HTML.** The code that we typed was the exact markup being parsed by the browser. If you saved an HTML document from the web, and opened it up in your text editor right next to your source-code, they would be identical.\n\nThis is basic to some of us, but perhaps revelatory to others. And maybe even preposterous to others, still. But this was important, for several reasons.\n\nWe cared about the final markup because we were building something to be consumed now _and in perpetutity_. Web browsers were new, and new ones were being invented all the time. These were not only copycats of functionality with a different wrapper, they were _different types of interaction_ with the content we were producing. Lynx was text-only. Mosaic (and Netscape Navigator[^NN] and Opera[^Opera] and Internet Explorer[^IE] and even Cyberdog[^Cyberdog] and others[^Others]!) were graphical. What was next? 3D[^3D]?\n\nWe never assumed what was next. Or, more specifically -- **we never assumed that what would come next would be identical to what we had now**. It was easy to see a future where our content would be consumed via (something) that hadn't been invented yet. And for the most part, we were correct. Eventually we got Web Spiders[^Spiders] and Search Engines[^SE] and Indexes[^Indexes]. We got mobile phones with WAP[^WAP] browsers that would display a pared-down version of our content.\n\nHow could we ensure that our content would be readable using technology that hasn't been invented yet?\n\n### Standards\n\n![Developers - Standards - Browsers](/images/developers-standards-browsers.webp)\n\nSo much of what I learned early on was by viewing the source of other websites, changing my markup, reloading. We were just about to get the O'reilly HTML[^HTML] book. Plus the mid-1990s gave us WebMonkey[^WebMonkey] and of course the W3C[^W3C]. By now, (most of)[^Layer] the browser makers were creating engines to render standard HTML, so we began writing standard HTML.\n\nOur hope was that, as long as the (consumer side) of the agreement was planning on rendering content based on web standards, that we would produce content to the same specification. We met in the middle. The code I write today, as long as it is _valid_, should be readable both in the browsers and consumption methods we've already produced, as well as any compliant method that should come in the future.\n\nAs time went on, our focus evolved to not only writing _standard_ HTML, but to use it _properly_. The early 2000s saw a Renaissance[^DWS] of this explicit focus, wherein we re-commited to using standard HTML elements _semantically_. This ensured that (wait for it) browsers and other parsers could determine the _meaning_ and _intention_ of how we organize our content with markup, rather than everything-is-a-div (or a table[^Tables]).\n\n## Back ... to The Future!\n\nMy biggest concern about the future is -- am I the only one who is concerned about _The Future?_ This might sound like a small thing, but it's a big thing.\n\nA lot of the technology we've added to the modern UI development stack is intended to make the _developer experience_ better - to help us to write \"better\" software, faster. I use the term _software_ here because in terms of complexity, that's what we're making.\n\nThe practitioners of today have learned about web development in Computer Science curriculums, where they also learned about (compilers, object-oriented languages, databases, etc.). They are conditioned to write _software_.\n\n### And the outlook is ... not great\n\nIncreasing functionality on the web will necessarily require increasingly complex code. I understand this. And technology-wise, the average device that our audience is using has more capability to parse and understand it than the simple machines that I began using (as long as you have signal and bandwidth). But lately what I've been seeing disgorged into the browser DOM is not commensurate with this escalation.\n\nI've accepted that libraries and shared components are necessary for modern web development. The days of twee artisanal hand-crafted top-to-bottom websites are probably over (at least, outside of hobbyist pursuits).\n\nI'm not arguing that we should reload and view the built source that is served to the browser with every saved change, read it thoroughly and make sure it's valid. This would be taxing, and the incremental benefit would not justify the time and expense. But we should do what we can to assure that it is **valid and only as complex as it needs to be.** Remember, we are still honoring that unwritten agreement between developers and browsers and 🦋.\n\nThis is especially important if we are the ones creating libraries, components, and design systems that will be re-used. Our consumers and ultimately their users are relying on us to have put in the dilligence to make sure that are honoring this agreement with all possible _Future(s)_.\n\nBut mike - we are time-constrained. Sprint deliverables, deadlines, launch dates. This is true, but we have development tools that can help.\n\n### We have the technology\n\n![Stop it. Get some help.](/images/get-some-help.webp)\n\nThere are tools to help[^Tools]. We have reference websites for CSS browser compatibility. We have linters that can check the built output of our websites. We have browser dev tools and extensions that can parse for validity and accessibility. We have automated testing frameworks that can render our code and interact with it sight-unseen, and report any difficulties they encounter.\n\nPerhaps most importantly, we have development servers that can hot-reload web _browsers_ when you save changes to documents. I said browsers with an **S** on the end - how wonderous it is to save a document and see it refresh in a variety of windows / devices / sizes / shapes!\n\nMore to my point: **\"it looks good in Chrome\" is not acceptable** as your sole success criteria.\n\nIf that is how you develop, you are not only _abandoning your promise to the Future_, but you're also _ignoring your responsibility to the Present_.\n\n### We have to make the choice\n\n![Red Pill or Blue Pill](/images/Red_and_blue_pill.webp)\n\nDoing the right thing is a conscious choice. With the pressure we get in our jobs, it's difficult to justify the time and effort to business people who don't 'get it' and just want the tickets closed as quickly as possible.\n\nSo we spend time optimizing our tools and our workflows to be fast. We need to also optimize our tools and our workflows to do the right thing.\n\nWe are the only ones who can advocate for our code, our users, and _The Future_. So extend your cleverness with tooling and optimization (or even your manual routines) to help you create something that will endure.\n\nlike Merlin Mann often [says](https://github.com/merlinmann/wisdom/blob/master/wisdom.md) (attributed to Jeff Veen), **make the right thing the easy thing.**\n\n## Summary\n\n![Old Man Yells at Cloud](/images/yells-at-cloud.webp)\n\nI didn't write all this to yell at you. (no, really). I implore you to think about the _Future_ in what you build. This was inherent in my journey when I started. I'm not sure where we strayed from this focus.\n\nMaybe newer developers view this as a **Career**. When I started out, it was a **Frontier**.\n\n### Takeaways, or TL;DR:\n\n- refuse to sacrifice access to your content in the pursuit of something new and shiny\n- develop to standards and use html elements for what they're semantically designed for\n- strive to produce code that is valid and _only as complex as it needs to be_\n- broadly test on all available browsers and devices\n- consider the baseline of access - maybe not Lynx, but at least account for common problems that thwart and frustrate users[^Common]\n- check your work with browser extensions like lighthouse &amp; others\n\n### And, Ultimately:\n\n**Consider that what we create may outlast our membership on a team, our employment at a company, the browsers that people are using today, or even survive longer than _us._**\n\n_The Future_ is counting on you to do the right thing.\n\n[^WIT]: I began the Architecture program at Wentworth Institute of Technology in 1991. This was the precise time where we started transitioning from paper drawing to Computer Aided Design (CAD) - about half my courses still drew manually (pencils, t-squares, triangles, scales) and half were CAD.\n[^Nineties]: 1991, or as my kids would call it \"the late nineteen-hundreds.\"\n[^DOS]: While early versions of Microsoft Windows were available, MS DOS 3.1 and subsequent releases were much cheaper, and a lot of expensive vertical-market software was not compatible with Windows anyway (you could click on an icon in Windows to launch them, and they would abruptly exit windows and load the DOS-based application full screen, without the ability to switch back and forth).\n[^AutoCAD]: At this time, [AutoCAD for DOS](https://en.wikipedia.org/wiki/AutoCAD_version_history) was far more performant, and I built up quite a muscle-memory for its specific hotkeys. This is the first, probably, in a long list of things that I mastered, and then through updates and the passage of time, became abruptly irrelevant. AutoDesk still makes [AutoCAD](https://www.autodesk.com/products/autocad/overview), having gone through many revisions, to become somewhat of a juggernaut of software to serve not only 2-dimensional and 3-dimensional drawing and modeling, but a new genre of software called Building Information Modeling (BIM). This makes it too expensive for me to tinker with anymore, sadly.\n[^VT220]: Wentworth had several labs of [VT220](https://en.wikipedia.org/wiki/VT220) terminals. I usually gravitated toward the ones with Amber colored displays.\n[^Pine]: [Pine](\u003Chttps://en.wikipedia.org/wiki/Pine_(email_client)>) was an early terminal-based email program, I don't recall but I may have actually started using [Elm](\u003Chttps://en.wikipedia.org/wiki/Elm_(email_client)>) in my first year of college. The administrators would usually create an alias ([symbolic link](https://en.wikipedia.org/wiki/Symbolic_link)) for common functionality, so users could either choose 'mail' from a login menu, or type 'mail' in a command shell to be taken to (whatever the configured mail client was at the time)\n[^VAX]: Wentworth had two Digital Equipment Corporation VAX systems, though I do not recall the specific models. The system for staff &amp; faculty was called 'Bert' while the system for students was named 'Ernie.' I never found out who was responsible for that naming.\n[^VI]: While I am not one of the 'I still code in [vi](https://www.vim.org/)' people, a lot of whom I know and respect, I did use it a lot for coding back then, and I still use it now for editing shell scripts and config files, especially, obviously, when working on a remote server.\n[^Lynx]: [Lynx](https://lynx.invisible-island.net) and [Links](\u003Chttps://en.wikipedia.org/wiki/Links_(web_browser)>) are somewhat conflated in my mind, and I'm sure I used them interchangably at various times\n[^Webmaster]: Webmaster was the term used in acadamia to refer to the person in charge of the organization's web presence. I'm not entirely sure of the etymology, it calls to mind Dungeons and Dragons (\"Dungeon Master\") but ultimately dwindled in usage, to be replaced by more familiar designer / developer /engineer titles. Though at the time, it was much more encompassing -- I maintained the hardware and software of the web server, in addition to developing content. The 'full stack' started with the computer under my desk (no, really, when I was hired - the web server was the computer under my desk. I moved it to the server room.)\n[^Mac]: The Mac labs at Wentworth in the early 90s were Macintosh Quadra [700](https://en.wikipedia.org/wiki/Macintosh_Quadra_700) and [800](https://en.wikipedia.org/wiki/Macintosh_Quadra_800).\n[^Mosaic]: [NCSA Mosaic](https://en.wikipedia.org/wiki/NCSA_Mosaic) was the first widely-used graphical browser for the web, followed very quickly by the rest of this list. Wired does well to capture its impact [in this article](https://www.wired.com/2010/04/0422mosaic-web-browser/)\n[^NN]: [Netscape Navigator](https://en.wikipedia.org/wiki/Netscape_Navigator) very quickly followed Mosaic and was pretty good, until they really pushed for you to download it in a package called 'Netscape Communicator' that combined email and calendars and ... people didn't like it.\n[^Opera]: [Opera](\u003Chttps://en.wikipedia.org/wiki/Opera_(web_browser)>) had always been a dark-horse contender in my mind, but consistent.\n[^IE]: [Internet Explorer](https://en.wikipedia.org/wiki/Internet_Explorer), when new, was actually quite good. Even the [Mac version](https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac), which would eventually become bundled with Mac OS (via large investment in Apple by Microsoft) was quite good at the time.\n[^Cyberdog]: [Cyberdog](https://en.wikipedia.org/wiki/Cyberdog) was a very short-lived browser by Apple. I was very excited about Cyberdog and [OpenDoc](https://en.wikipedia.org/wiki/OpenDoc) in general, both of which went away very quickly. It probably only gets mentioned here due to my misplaced enthusiasm.\n[^Others]: I'm leaving so many out of this list, or else this post would be even more egregiously long. So many. Really you should read through a lot of wikipedias history of web browsers to get a feel for just how much the landscape was broadening and changing beneath our feet. [History of the web browser](https://en.wikipedia.org/wiki/History_of_the_web_browser) and [List of web browsers](https://en.wikipedia.org/wiki/List_of_web_browsers) are good places to start.\n[^3D]: No, really, we thought that [VRML](https://en.wikipedia.org/wiki/VRML) and [3D browsing](https://en.wikipedia.org/wiki/Web3D) might take off. Hey, it still might!\n[^Spiders]: The original indexes of the web started out as private, or local, link-by-link indexes of web pages as they were [crawled](https://en.wikipedia.org/wiki/Web_crawler) and added to a database. Some of these databases had public interfaces where you could search for topics - at first you had to be very specific about keywords and the syntax that you used, as they did not have fuzzy matching or word stemming or natural language processing. This also meant that when developing, you had to be very explicit to define what your web page was about, if you hoped that people would find it. I remember the day that i first saw my website in [WebCrawler](https://en.wikipedia.org/wiki/WebCrawler)\n[^SE]: Search Engines that were developed as commercial tools were built when companies began to realize that discoverability on the web was something that could be productized and monetized. Back then, it felt a lot less creepy than it does now - the technology didn't yet exist to target individual users specifically, it was all based on aggregated data. As new search engines were developed and their functionality increased, we (users) hopped from engine to engine.\n[^Indexes]: Curated indexes probably became too labor intensive to maintain, but [DMOZ](https://en.wikipedia.org/wiki/DMOZ) was excellent and even [Yahoo Directory](https://en.wikipedia.org/wiki/Yahoo!_Directory) was a tremendous thing.\n[^WAP]: In the days before smartphones, the mobile phone data landscape was sparse. [WAP](https://en.wikipedia.org/wiki/Wireless_Application_Protocol) was a promising development, but device capabilities and network capacity expanded quickly enough that WAP became unnecessary. thankfully. It was rough, y'all.\n[^HTML]: \"HTML: The Definitive Guide\" was first published in April of 1996. Feeling nostalgic? [Check it out on archive.org](https://archive.org/details/htmldefinitivegu00musc_0). I'm not sure when I picked up my copy, but I know it spent many years on my desk and in my backpack.\n[^WebMonkey]: [WebMonkey](https://en.wikipedia.org/wiki/Webmonkey) was an excellent resource for cutting-edge markup on the web. It had the style and swagger of [Wired Magazine](https://www.wired.com) and their other properties like [HotWired](https://en.wikipedia.org/wiki/HotWired). A better write-up of its history and ultimate demise [here at Wired](https://www.wired.com/2004/02/webmonkey-rip-1996-2004/)\n[^W3C]: The [W3C](https://www.w3.org/) was always there, and felt like a stable presence to counter the interests of corporate groups who were pushing for the web to be siloed and controlled.\n[^Layer]: For a while Netscape tried to make their own DOM, but eventually relented, [Jeffrey Zeldman himself has the details of that here](https://alistapart.com/article/bullet/).\n[^DWS]: [Designing with Web Standards](https://en.wikipedia.org/wiki/Designing_with_Web_Standards) became the guide and the justification for shifting to Semantic markup. It also helped that CSS was evolving and allowing us to create complex layouts properly.\n[^Tables]: For some time in the late 90s, web standards and browsers just couldn't keep up with the demands of marketing and designers and corporations. Before advanced web layouts were possible with CSS, we improperly used data tables for layout. I actually got very good at this, then I stopped. If you need a great example (not my work) you can check out the famous [Space Jam website](https://www.spacejam.com/1996/). If you want to see my work, here's a [copy of my website from 1996](http://mikesusz.com/sitemuseum/1996/) (resize your browser - it's _responsive!_)\n[^Tools]: Tools I use every day: [MDN](https://developer.mozilla.org/en-US/), [Can I Use](https://caniuse.com/), [Lighthouse in Chrome Dev Tools](https://developer.chrome.com/docs/lighthouse/overview), [IBM Equal Access Toolkit/checker](https://www.ibm.com/able/toolkit), all the stuff I talked about [on my Uses page](/uses)\n[^Common]: Common problems that thwart or frustrate users are probably things you're familiar with: \"oops this script didn't load\" or \"oops that tracking gif didn't load\" or \"oops there was a javascript error\" does your website still... function? Have you experienced this as a user, how did it make you feel?\n\n---\n\n## Image Credits:\n\n- \"Don't Forget\" graphic is a parody that I made from a frame of the TV show [The Simpsons \"And Maggie Makes Three\" Season 6, Episode 13](https://simpsonswiki.com/wiki/And_Maggie_Makes_Three). Original airdate: January 22, 1995\n- VT220 image from Tom Page via [Wikimedia](https://commons.wikimedia.org/wiki/File:DEC_VT220_terminal.jpg)\n- Screenshot of Mosaic browser by Charles Severance, via [Wikimedia](https://commons.wikimedia.org/wiki/File:NCSA_Mosaic_Browser_Screenshot.png)\n- Developers 🤝 Browsers graphic was made on [imgflip.com](https://imgflip.com) 'Epic Handshake' meme generator. (The original frame is a painting-like rendition of a scene from the film _Predator_, the actors being depicted handshaking are Carl Weathers and Arnold Schwarzenegger, respectively)\n- \"Stop it. Get some help\" image is a meme now, but it was originally from an anti-drug Public Service Announcement from 1987 starring Michael Jordan\n- Red Pill / Blue Pill image by W.carter, via [Wikimedia](https://commons.wikimedia.org/wiki/File:Red_and_blue_pill.jpg). This is a reference to a film called _The Matrix_, from the late nineteen-hundreds\n- \"Old Man Yells at Cloud\" image is from [The Simpsons, Season 13 Episode 13 \"The Old Man and the Key\"](https://simpsonswiki.com/wiki/The_Old_Man_and_the_Key)\n\n---","src/content/blog/dont-forget.md","9cc879a80a736db3",{"html":204,"metadata":205},"\u003Cp>As I roll off of an intense assignment at work, I’ve got a bit of free brain space to reflect on the kind of work we’ve been doing, how we have done it, and how this affects — \u003Cem>The Future.\u003C/em>\u003C/p>\n\u003Cp>(\u003Cem>about 15 minutes to read, unless you skip all the footnotes\u003C/em> 😉)\u003C/p>\n\u003Ch2 id=\"we-have-to-go-back\">We have to go back…\u003C/h2>\n\u003Cp>In college, I spent a lot of time in computer labs. Since I was studying Architecture\u003Csup>\u003Ca href=\"#user-content-fn-wit\" id=\"user-content-fnref-wit\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup> and this was the year 1991\u003Csup>\u003Ca href=\"#user-content-fn-nineties\" id=\"user-content-fnref-nineties\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>, this time was split between PCs running DOS\u003Csup>\u003Ca href=\"#user-content-fn-dos\" id=\"user-content-fnref-dos\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">3\u003C/a>\u003C/sup> with AutoCAD\u003Csup>\u003Ca href=\"#user-content-fn-autocad\" id=\"user-content-fnref-autocad\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">4\u003C/a>\u003C/sup>, and VT terminals\u003Csup>\u003Ca href=\"#user-content-fn-vt220\" id=\"user-content-fnref-vt220\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">5\u003C/a>\u003C/sup> where I used Pine\u003Csup>\u003Ca href=\"#user-content-fn-pine\" id=\"user-content-fnref-pine\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">6\u003C/a>\u003C/sup> to send emails to my brother and my friends at different schools (I can send as many messages as I want? to anyone? for free??)\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/DEC_VT220_terminal.webp\" alt=\"VT220\">\u003C/p>\n\u003Cp>Some time after my account on the VAX\u003Csup>\u003Ca href=\"#user-content-fn-vax\" id=\"user-content-fnref-vax\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">7\u003C/a>\u003C/sup> was created, I noticed a \u003Ccode>'public_html'\u003C/code> directory appear inside my home directory. I asked the lab monitor what that was - and they explained I could put documents in there that could be be seen by other people on the web. (I can make as many web pages as I want? they can be seen by anyone? for free??)\u003C/p>\n\u003Cp>My first ‘homepage’ was written with the vi\u003Csup>\u003Ca href=\"#user-content-fn-vi\" id=\"user-content-fnref-vi\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">8\u003C/a>\u003C/sup> editor on a terminal. I usually viewed it (and any other web site I wanted to read) using Lynx\u003Csup>\u003Ca href=\"#user-content-fn-lynx\" id=\"user-content-fnref-lynx\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">9\u003C/a>\u003C/sup>.\u003C/p>\n\u003Cp>I was hooked. I didn’t know it at the time, but I would ultimately end up dropping out of the Architecture program, and be hired as the first full-time employee Webmaster\u003Csup>\u003Ca href=\"#user-content-fn-webmaster\" id=\"user-content-fnref-webmaster\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">10\u003C/a>\u003C/sup> of my college. But I’m getting ahead of myself.\u003C/p>\n\u003Cp>So here I was, a late teen-turning-twenty-something, with interests and opinions. (they were probably not very good opinions, but that did not deter me.) I created web pages for all of the things i was excited about - TV Shows, Movies, Music. I wrote about my love of these things, I linked to other people’s web pages (for free??) who shared the same interests.\u003C/p>\n\u003Cp>Eventually, I started to notice \u003Ccode>[INLINE]\u003C/code> markup in people’s homepages. I asked my friendly lab monitor about that. I must have finally depleted their patience, as they sighed quietly and suggested I ‘go check out the Mac\u003Csup>\u003Ca href=\"#user-content-fn-mac\" id=\"user-content-fnref-mac\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">11\u003C/a>\u003C/sup> lab.‘\u003C/p>\n\u003Ch3 id=\"when-i-first-saw-mosaic-everything-changed\">When I first saw Mosaic, everything changed\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/NCSA_Mosaic_Browser_Screenshot.webp\" alt=\"Screenshot of Mosaic browser\">\u003C/p>\n\u003Cp>Mosaic\u003Csup>\u003Ca href=\"#user-content-fn-mosaic\" id=\"user-content-fnref-mosaic\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">12\u003C/a>\u003C/sup> changed everything for me when I realized that it was possible to embed images, and to add \u003Cem>style\u003C/em> to your web pages (beyond the \u003Cstrong>bold\u003C/strong> and \u003Cem>italic\u003C/em> that I had managed to render in Lynx). I was an Architecture student, and my interests in design dovetailed into industrial and graphic design also. Having more control over the presentation of my content appealed to me greatly.\u003C/p>\n\u003Ch3 id=\"you-can-make-almost-anything-you-want\">You can make (almost) anything you want\u003C/h3>\n\u003Cp>So while learning new and different ways to affect the display of my web pages, there was always a retropective step — “Does this still work in Lynx?” Why would we care so much? \u003Cstrong>We refused to sacrifice access to our content in the pursuit of something new and shiny.\u003C/strong> We always checked in other/older browsers.\u003C/p>\n\u003Cp>\u003Cstrong>We hand-wrote HTML.\u003C/strong> The code that we typed was the exact markup being parsed by the browser. If you saved an HTML document from the web, and opened it up in your text editor right next to your source-code, they would be identical.\u003C/p>\n\u003Cp>This is basic to some of us, but perhaps revelatory to others. And maybe even preposterous to others, still. But this was important, for several reasons.\u003C/p>\n\u003Cp>We cared about the final markup because we were building something to be consumed now \u003Cem>and in perpetutity\u003C/em>. Web browsers were new, and new ones were being invented all the time. These were not only copycats of functionality with a different wrapper, they were \u003Cem>different types of interaction\u003C/em> with the content we were producing. Lynx was text-only. Mosaic (and Netscape Navigator\u003Csup>\u003Ca href=\"#user-content-fn-nn\" id=\"user-content-fnref-nn\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">13\u003C/a>\u003C/sup> and Opera\u003Csup>\u003Ca href=\"#user-content-fn-opera\" id=\"user-content-fnref-opera\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">14\u003C/a>\u003C/sup> and Internet Explorer\u003Csup>\u003Ca href=\"#user-content-fn-ie\" id=\"user-content-fnref-ie\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">15\u003C/a>\u003C/sup> and even Cyberdog\u003Csup>\u003Ca href=\"#user-content-fn-cyberdog\" id=\"user-content-fnref-cyberdog\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">16\u003C/a>\u003C/sup> and others\u003Csup>\u003Ca href=\"#user-content-fn-others\" id=\"user-content-fnref-others\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">17\u003C/a>\u003C/sup>!) were graphical. What was next? 3D\u003Csup>\u003Ca href=\"#user-content-fn-3d\" id=\"user-content-fnref-3d\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">18\u003C/a>\u003C/sup>?\u003C/p>\n\u003Cp>We never assumed what was next. Or, more specifically — \u003Cstrong>we never assumed that what would come next would be identical to what we had now\u003C/strong>. It was easy to see a future where our content would be consumed via (something) that hadn’t been invented yet. And for the most part, we were correct. Eventually we got Web Spiders\u003Csup>\u003Ca href=\"#user-content-fn-spiders\" id=\"user-content-fnref-spiders\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">19\u003C/a>\u003C/sup> and Search Engines\u003Csup>\u003Ca href=\"#user-content-fn-se\" id=\"user-content-fnref-se\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">20\u003C/a>\u003C/sup> and Indexes\u003Csup>\u003Ca href=\"#user-content-fn-indexes\" id=\"user-content-fnref-indexes\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">21\u003C/a>\u003C/sup>. We got mobile phones with WAP\u003Csup>\u003Ca href=\"#user-content-fn-wap\" id=\"user-content-fnref-wap\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">22\u003C/a>\u003C/sup> browsers that would display a pared-down version of our content.\u003C/p>\n\u003Cp>How could we ensure that our content would be readable using technology that hasn’t been invented yet?\u003C/p>\n\u003Ch3 id=\"standards\">Standards\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/developers-standards-browsers.webp\" alt=\"Developers - Standards - Browsers\">\u003C/p>\n\u003Cp>So much of what I learned early on was by viewing the source of other websites, changing my markup, reloading. We were just about to get the O’reilly HTML\u003Csup>\u003Ca href=\"#user-content-fn-html\" id=\"user-content-fnref-html\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">23\u003C/a>\u003C/sup> book. Plus the mid-1990s gave us WebMonkey\u003Csup>\u003Ca href=\"#user-content-fn-webmonkey\" id=\"user-content-fnref-webmonkey\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">24\u003C/a>\u003C/sup> and of course the W3C\u003Csup>\u003Ca href=\"#user-content-fn-w3c\" id=\"user-content-fnref-w3c\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">25\u003C/a>\u003C/sup>. By now, (most of)\u003Csup>\u003Ca href=\"#user-content-fn-layer\" id=\"user-content-fnref-layer\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">26\u003C/a>\u003C/sup> the browser makers were creating engines to render standard HTML, so we began writing standard HTML.\u003C/p>\n\u003Cp>Our hope was that, as long as the (consumer side) of the agreement was planning on rendering content based on web standards, that we would produce content to the same specification. We met in the middle. The code I write today, as long as it is \u003Cem>valid\u003C/em>, should be readable both in the browsers and consumption methods we’ve already produced, as well as any compliant method that should come in the future.\u003C/p>\n\u003Cp>As time went on, our focus evolved to not only writing \u003Cem>standard\u003C/em> HTML, but to use it \u003Cem>properly\u003C/em>. The early 2000s saw a Renaissance\u003Csup>\u003Ca href=\"#user-content-fn-dws\" id=\"user-content-fnref-dws\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">27\u003C/a>\u003C/sup> of this explicit focus, wherein we re-commited to using standard HTML elements \u003Cem>semantically\u003C/em>. This ensured that (wait for it) browsers and other parsers could determine the \u003Cem>meaning\u003C/em> and \u003Cem>intention\u003C/em> of how we organize our content with markup, rather than everything-is-a-div (or a table\u003Csup>\u003Ca href=\"#user-content-fn-tables\" id=\"user-content-fnref-tables\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">28\u003C/a>\u003C/sup>).\u003C/p>\n\u003Ch2 id=\"back--to-the-future\">Back … to The Future!\u003C/h2>\n\u003Cp>My biggest concern about the future is — am I the only one who is concerned about \u003Cem>The Future?\u003C/em> This might sound like a small thing, but it’s a big thing.\u003C/p>\n\u003Cp>A lot of the technology we’ve added to the modern UI development stack is intended to make the \u003Cem>developer experience\u003C/em> better - to help us to write “better” software, faster. I use the term \u003Cem>software\u003C/em> here because in terms of complexity, that’s what we’re making.\u003C/p>\n\u003Cp>The practitioners of today have learned about web development in Computer Science curriculums, where they also learned about (compilers, object-oriented languages, databases, etc.). They are conditioned to write \u003Cem>software\u003C/em>.\u003C/p>\n\u003Ch3 id=\"and-the-outlook-is--not-great\">And the outlook is … not great\u003C/h3>\n\u003Cp>Increasing functionality on the web will necessarily require increasingly complex code. I understand this. And technology-wise, the average device that our audience is using has more capability to parse and understand it than the simple machines that I began using (as long as you have signal and bandwidth). But lately what I’ve been seeing disgorged into the browser DOM is not commensurate with this escalation.\u003C/p>\n\u003Cp>I’ve accepted that libraries and shared components are necessary for modern web development. The days of twee artisanal hand-crafted top-to-bottom websites are probably over (at least, outside of hobbyist pursuits).\u003C/p>\n\u003Cp>I’m not arguing that we should reload and view the built source that is served to the browser with every saved change, read it thoroughly and make sure it’s valid. This would be taxing, and the incremental benefit would not justify the time and expense. But we should do what we can to assure that it is \u003Cstrong>valid and only as complex as it needs to be.\u003C/strong> Remember, we are still honoring that unwritten agreement between developers and browsers and 🦋.\u003C/p>\n\u003Cp>This is especially important if we are the ones creating libraries, components, and design systems that will be re-used. Our consumers and ultimately their users are relying on us to have put in the dilligence to make sure that are honoring this agreement with all possible \u003Cem>Future(s)\u003C/em>.\u003C/p>\n\u003Cp>But mike - we are time-constrained. Sprint deliverables, deadlines, launch dates. This is true, but we have development tools that can help.\u003C/p>\n\u003Ch3 id=\"we-have-the-technology\">We have the technology\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/get-some-help.webp\" alt=\"Stop it. Get some help.\">\u003C/p>\n\u003Cp>There are tools to help\u003Csup>\u003Ca href=\"#user-content-fn-tools\" id=\"user-content-fnref-tools\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">29\u003C/a>\u003C/sup>. We have reference websites for CSS browser compatibility. We have linters that can check the built output of our websites. We have browser dev tools and extensions that can parse for validity and accessibility. We have automated testing frameworks that can render our code and interact with it sight-unseen, and report any difficulties they encounter.\u003C/p>\n\u003Cp>Perhaps most importantly, we have development servers that can hot-reload web \u003Cem>browsers\u003C/em> when you save changes to documents. I said browsers with an \u003Cstrong>S\u003C/strong> on the end - how wonderous it is to save a document and see it refresh in a variety of windows / devices / sizes / shapes!\u003C/p>\n\u003Cp>More to my point: \u003Cstrong>“it looks good in Chrome” is not acceptable\u003C/strong> as your sole success criteria.\u003C/p>\n\u003Cp>If that is how you develop, you are not only \u003Cem>abandoning your promise to the Future\u003C/em>, but you’re also \u003Cem>ignoring your responsibility to the Present\u003C/em>.\u003C/p>\n\u003Ch3 id=\"we-have-to-make-the-choice\">We have to make the choice\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/Red_and_blue_pill.webp\" alt=\"Red Pill or Blue Pill\">\u003C/p>\n\u003Cp>Doing the right thing is a conscious choice. With the pressure we get in our jobs, it’s difficult to justify the time and effort to business people who don’t ‘get it’ and just want the tickets closed as quickly as possible.\u003C/p>\n\u003Cp>So we spend time optimizing our tools and our workflows to be fast. We need to also optimize our tools and our workflows to do the right thing.\u003C/p>\n\u003Cp>We are the only ones who can advocate for our code, our users, and \u003Cem>The Future\u003C/em>. So extend your cleverness with tooling and optimization (or even your manual routines) to help you create something that will endure.\u003C/p>\n\u003Cp>like Merlin Mann often \u003Ca href=\"https://github.com/merlinmann/wisdom/blob/master/wisdom.md\">says\u003C/a> (attributed to Jeff Veen), \u003Cstrong>make the right thing the easy thing.\u003C/strong>\u003C/p>\n\u003Ch2 id=\"summary\">Summary\u003C/h2>\n\u003Cp>\u003Cimg src=\"/images/yells-at-cloud.webp\" alt=\"Old Man Yells at Cloud\">\u003C/p>\n\u003Cp>I didn’t write all this to yell at you. (no, really). I implore you to think about the \u003Cem>Future\u003C/em> in what you build. This was inherent in my journey when I started. I’m not sure where we strayed from this focus.\u003C/p>\n\u003Cp>Maybe newer developers view this as a \u003Cstrong>Career\u003C/strong>. When I started out, it was a \u003Cstrong>Frontier\u003C/strong>.\u003C/p>\n\u003Ch3 id=\"takeaways-or-tldr\">Takeaways, or TL;DR:\u003C/h3>\n\u003Cul>\n\u003Cli>refuse to sacrifice access to your content in the pursuit of something new and shiny\u003C/li>\n\u003Cli>develop to standards and use html elements for what they’re semantically designed for\u003C/li>\n\u003Cli>strive to produce code that is valid and \u003Cem>only as complex as it needs to be\u003C/em>\u003C/li>\n\u003Cli>broadly test on all available browsers and devices\u003C/li>\n\u003Cli>consider the baseline of access - maybe not Lynx, but at least account for common problems that thwart and frustrate users\u003Csup>\u003Ca href=\"#user-content-fn-common\" id=\"user-content-fnref-common\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">30\u003C/a>\u003C/sup>\u003C/li>\n\u003Cli>check your work with browser extensions like lighthouse &#x26; others\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"and-ultimately\">And, Ultimately:\u003C/h3>\n\u003Cp>\u003Cstrong>Consider that what we create may outlast our membership on a team, our employment at a company, the browsers that people are using today, or even survive longer than \u003Cem>us.\u003C/em>\u003C/strong>\u003C/p>\n\u003Cp>\u003Cem>The Future\u003C/em> is counting on you to do the right thing.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"image-credits\">Image Credits:\u003C/h2>\n\u003Cul>\n\u003Cli>“Don’t Forget” graphic is a parody that I made from a frame of the TV show \u003Ca href=\"https://simpsonswiki.com/wiki/And_Maggie_Makes_Three\">The Simpsons “And Maggie Makes Three” Season 6, Episode 13\u003C/a>. Original airdate: January 22, 1995\u003C/li>\n\u003Cli>VT220 image from Tom Page via \u003Ca href=\"https://commons.wikimedia.org/wiki/File:DEC_VT220_terminal.jpg\">Wikimedia\u003C/a>\u003C/li>\n\u003Cli>Screenshot of Mosaic browser by Charles Severance, via \u003Ca href=\"https://commons.wikimedia.org/wiki/File:NCSA_Mosaic_Browser_Screenshot.png\">Wikimedia\u003C/a>\u003C/li>\n\u003Cli>Developers 🤝 Browsers graphic was made on \u003Ca href=\"https://imgflip.com\">imgflip.com\u003C/a> ‘Epic Handshake’ meme generator. (The original frame is a painting-like rendition of a scene from the film \u003Cem>Predator\u003C/em>, the actors being depicted handshaking are Carl Weathers and Arnold Schwarzenegger, respectively)\u003C/li>\n\u003Cli>“Stop it. Get some help” image is a meme now, but it was originally from an anti-drug Public Service Announcement from 1987 starring Michael Jordan\u003C/li>\n\u003Cli>Red Pill / Blue Pill image by W.carter, via \u003Ca href=\"https://commons.wikimedia.org/wiki/File:Red_and_blue_pill.jpg\">Wikimedia\u003C/a>. This is a reference to a film called \u003Cem>The Matrix\u003C/em>, from the late nineteen-hundreds\u003C/li>\n\u003Cli>“Old Man Yells at Cloud” image is from \u003Ca href=\"https://simpsonswiki.com/wiki/The_Old_Man_and_the_Key\">The Simpsons, Season 13 Episode 13 “The Old Man and the Key”\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-wit\">\n\u003Cp>I began the Architecture program at Wentworth Institute of Technology in 1991. This was the precise time where we started transitioning from paper drawing to Computer Aided Design (CAD) - about half my courses still drew manually (pencils, t-squares, triangles, scales) and half were CAD. \u003Ca href=\"#user-content-fnref-wit\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-nineties\">\n\u003Cp>1991, or as my kids would call it “the late nineteen-hundreds.” \u003Ca href=\"#user-content-fnref-nineties\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-dos\">\n\u003Cp>While early versions of Microsoft Windows were available, MS DOS 3.1 and subsequent releases were much cheaper, and a lot of expensive vertical-market software was not compatible with Windows anyway (you could click on an icon in Windows to launch them, and they would abruptly exit windows and load the DOS-based application full screen, without the ability to switch back and forth). \u003Ca href=\"#user-content-fnref-dos\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-autocad\">\n\u003Cp>At this time, \u003Ca href=\"https://en.wikipedia.org/wiki/AutoCAD_version_history\">AutoCAD for DOS\u003C/a> was far more performant, and I built up quite a muscle-memory for its specific hotkeys. This is the first, probably, in a long list of things that I mastered, and then through updates and the passage of time, became abruptly irrelevant. AutoDesk still makes \u003Ca href=\"https://www.autodesk.com/products/autocad/overview\">AutoCAD\u003C/a>, having gone through many revisions, to become somewhat of a juggernaut of software to serve not only 2-dimensional and 3-dimensional drawing and modeling, but a new genre of software called Building Information Modeling (BIM). This makes it too expensive for me to tinker with anymore, sadly. \u003Ca href=\"#user-content-fnref-autocad\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-vt220\">\n\u003Cp>Wentworth had several labs of \u003Ca href=\"https://en.wikipedia.org/wiki/VT220\">VT220\u003C/a> terminals. I usually gravitated toward the ones with Amber colored displays. \u003Ca href=\"#user-content-fnref-vt220\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-pine\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Pine_(email_client)\">Pine\u003C/a> was an early terminal-based email program, I don’t recall but I may have actually started using \u003Ca href=\"https://en.wikipedia.org/wiki/Elm_(email_client)\">Elm\u003C/a> in my first year of college. The administrators would usually create an alias (\u003Ca href=\"https://en.wikipedia.org/wiki/Symbolic_link\">symbolic link\u003C/a>) for common functionality, so users could either choose ‘mail’ from a login menu, or type ‘mail’ in a command shell to be taken to (whatever the configured mail client was at the time) \u003Ca href=\"#user-content-fnref-pine\" data-footnote-backref=\"\" aria-label=\"Back to reference 6\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-vax\">\n\u003Cp>Wentworth had two Digital Equipment Corporation VAX systems, though I do not recall the specific models. The system for staff &#x26; faculty was called ‘Bert’ while the system for students was named ‘Ernie.’ I never found out who was responsible for that naming. \u003Ca href=\"#user-content-fnref-vax\" data-footnote-backref=\"\" aria-label=\"Back to reference 7\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-vi\">\n\u003Cp>While I am not one of the ‘I still code in \u003Ca href=\"https://www.vim.org/\">vi\u003C/a>’ people, a lot of whom I know and respect, I did use it a lot for coding back then, and I still use it now for editing shell scripts and config files, especially, obviously, when working on a remote server. \u003Ca href=\"#user-content-fnref-vi\" data-footnote-backref=\"\" aria-label=\"Back to reference 8\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-lynx\">\n\u003Cp>\u003Ca href=\"https://lynx.invisible-island.net\">Lynx\u003C/a> and \u003Ca href=\"https://en.wikipedia.org/wiki/Links_(web_browser)\">Links\u003C/a> are somewhat conflated in my mind, and I’m sure I used them interchangably at various times \u003Ca href=\"#user-content-fnref-lynx\" data-footnote-backref=\"\" aria-label=\"Back to reference 9\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-webmaster\">\n\u003Cp>Webmaster was the term used in acadamia to refer to the person in charge of the organization’s web presence. I’m not entirely sure of the etymology, it calls to mind Dungeons and Dragons (“Dungeon Master”) but ultimately dwindled in usage, to be replaced by more familiar designer / developer /engineer titles. Though at the time, it was much more encompassing — I maintained the hardware and software of the web server, in addition to developing content. The ‘full stack’ started with the computer under my desk (no, really, when I was hired - the web server was the computer under my desk. I moved it to the server room.) \u003Ca href=\"#user-content-fnref-webmaster\" data-footnote-backref=\"\" aria-label=\"Back to reference 10\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-mac\">\n\u003Cp>The Mac labs at Wentworth in the early 90s were Macintosh Quadra \u003Ca href=\"https://en.wikipedia.org/wiki/Macintosh_Quadra_700\">700\u003C/a> and \u003Ca href=\"https://en.wikipedia.org/wiki/Macintosh_Quadra_800\">800\u003C/a>. \u003Ca href=\"#user-content-fnref-mac\" data-footnote-backref=\"\" aria-label=\"Back to reference 11\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-mosaic\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/NCSA_Mosaic\">NCSA Mosaic\u003C/a> was the first widely-used graphical browser for the web, followed very quickly by the rest of this list. Wired does well to capture its impact \u003Ca href=\"https://www.wired.com/2010/04/0422mosaic-web-browser/\">in this article\u003C/a> \u003Ca href=\"#user-content-fnref-mosaic\" data-footnote-backref=\"\" aria-label=\"Back to reference 12\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-nn\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Netscape_Navigator\">Netscape Navigator\u003C/a> very quickly followed Mosaic and was pretty good, until they really pushed for you to download it in a package called ‘Netscape Communicator’ that combined email and calendars and … people didn’t like it. \u003Ca href=\"#user-content-fnref-nn\" data-footnote-backref=\"\" aria-label=\"Back to reference 13\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-opera\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Opera_(web_browser)\">Opera\u003C/a> had always been a dark-horse contender in my mind, but consistent. \u003Ca href=\"#user-content-fnref-opera\" data-footnote-backref=\"\" aria-label=\"Back to reference 14\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-ie\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Internet_Explorer\">Internet Explorer\u003C/a>, when new, was actually quite good. Even the \u003Ca href=\"https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac\">Mac version\u003C/a>, which would eventually become bundled with Mac OS (via large investment in Apple by Microsoft) was quite good at the time. \u003Ca href=\"#user-content-fnref-ie\" data-footnote-backref=\"\" aria-label=\"Back to reference 15\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-cyberdog\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Cyberdog\">Cyberdog\u003C/a> was a very short-lived browser by Apple. I was very excited about Cyberdog and \u003Ca href=\"https://en.wikipedia.org/wiki/OpenDoc\">OpenDoc\u003C/a> in general, both of which went away very quickly. It probably only gets mentioned here due to my misplaced enthusiasm. \u003Ca href=\"#user-content-fnref-cyberdog\" data-footnote-backref=\"\" aria-label=\"Back to reference 16\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-others\">\n\u003Cp>I’m leaving so many out of this list, or else this post would be even more egregiously long. So many. Really you should read through a lot of wikipedias history of web browsers to get a feel for just how much the landscape was broadening and changing beneath our feet. \u003Ca href=\"https://en.wikipedia.org/wiki/History_of_the_web_browser\">History of the web browser\u003C/a> and \u003Ca href=\"https://en.wikipedia.org/wiki/List_of_web_browsers\">List of web browsers\u003C/a> are good places to start. \u003Ca href=\"#user-content-fnref-others\" data-footnote-backref=\"\" aria-label=\"Back to reference 17\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-3d\">\n\u003Cp>No, really, we thought that \u003Ca href=\"https://en.wikipedia.org/wiki/VRML\">VRML\u003C/a> and \u003Ca href=\"https://en.wikipedia.org/wiki/Web3D\">3D browsing\u003C/a> might take off. Hey, it still might! \u003Ca href=\"#user-content-fnref-3d\" data-footnote-backref=\"\" aria-label=\"Back to reference 18\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-spiders\">\n\u003Cp>The original indexes of the web started out as private, or local, link-by-link indexes of web pages as they were \u003Ca href=\"https://en.wikipedia.org/wiki/Web_crawler\">crawled\u003C/a> and added to a database. Some of these databases had public interfaces where you could search for topics - at first you had to be very specific about keywords and the syntax that you used, as they did not have fuzzy matching or word stemming or natural language processing. This also meant that when developing, you had to be very explicit to define what your web page was about, if you hoped that people would find it. I remember the day that i first saw my website in \u003Ca href=\"https://en.wikipedia.org/wiki/WebCrawler\">WebCrawler\u003C/a> \u003Ca href=\"#user-content-fnref-spiders\" data-footnote-backref=\"\" aria-label=\"Back to reference 19\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-se\">\n\u003Cp>Search Engines that were developed as commercial tools were built when companies began to realize that discoverability on the web was something that could be productized and monetized. Back then, it felt a lot less creepy than it does now - the technology didn’t yet exist to target individual users specifically, it was all based on aggregated data. As new search engines were developed and their functionality increased, we (users) hopped from engine to engine. \u003Ca href=\"#user-content-fnref-se\" data-footnote-backref=\"\" aria-label=\"Back to reference 20\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-indexes\">\n\u003Cp>Curated indexes probably became too labor intensive to maintain, but \u003Ca href=\"https://en.wikipedia.org/wiki/DMOZ\">DMOZ\u003C/a> was excellent and even \u003Ca href=\"https://en.wikipedia.org/wiki/Yahoo!_Directory\">Yahoo Directory\u003C/a> was a tremendous thing. \u003Ca href=\"#user-content-fnref-indexes\" data-footnote-backref=\"\" aria-label=\"Back to reference 21\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-wap\">\n\u003Cp>In the days before smartphones, the mobile phone data landscape was sparse. \u003Ca href=\"https://en.wikipedia.org/wiki/Wireless_Application_Protocol\">WAP\u003C/a> was a promising development, but device capabilities and network capacity expanded quickly enough that WAP became unnecessary. thankfully. It was rough, y’all. \u003Ca href=\"#user-content-fnref-wap\" data-footnote-backref=\"\" aria-label=\"Back to reference 22\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-html\">\n\u003Cp>“HTML: The Definitive Guide” was first published in April of 1996. Feeling nostalgic? \u003Ca href=\"https://archive.org/details/htmldefinitivegu00musc_0\">Check it out on archive.org\u003C/a>. I’m not sure when I picked up my copy, but I know it spent many years on my desk and in my backpack. \u003Ca href=\"#user-content-fnref-html\" data-footnote-backref=\"\" aria-label=\"Back to reference 23\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-webmonkey\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Webmonkey\">WebMonkey\u003C/a> was an excellent resource for cutting-edge markup on the web. It had the style and swagger of \u003Ca href=\"https://www.wired.com\">Wired Magazine\u003C/a> and their other properties like \u003Ca href=\"https://en.wikipedia.org/wiki/HotWired\">HotWired\u003C/a>. A better write-up of its history and ultimate demise \u003Ca href=\"https://www.wired.com/2004/02/webmonkey-rip-1996-2004/\">here at Wired\u003C/a> \u003Ca href=\"#user-content-fnref-webmonkey\" data-footnote-backref=\"\" aria-label=\"Back to reference 24\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-w3c\">\n\u003Cp>The \u003Ca href=\"https://www.w3.org/\">W3C\u003C/a> was always there, and felt like a stable presence to counter the interests of corporate groups who were pushing for the web to be siloed and controlled. \u003Ca href=\"#user-content-fnref-w3c\" data-footnote-backref=\"\" aria-label=\"Back to reference 25\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-layer\">\n\u003Cp>For a while Netscape tried to make their own DOM, but eventually relented, \u003Ca href=\"https://alistapart.com/article/bullet/\">Jeffrey Zeldman himself has the details of that here\u003C/a>. \u003Ca href=\"#user-content-fnref-layer\" data-footnote-backref=\"\" aria-label=\"Back to reference 26\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-dws\">\n\u003Cp>\u003Ca href=\"https://en.wikipedia.org/wiki/Designing_with_Web_Standards\">Designing with Web Standards\u003C/a> became the guide and the justification for shifting to Semantic markup. It also helped that CSS was evolving and allowing us to create complex layouts properly. \u003Ca href=\"#user-content-fnref-dws\" data-footnote-backref=\"\" aria-label=\"Back to reference 27\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-tables\">\n\u003Cp>For some time in the late 90s, web standards and browsers just couldn’t keep up with the demands of marketing and designers and corporations. Before advanced web layouts were possible with CSS, we improperly used data tables for layout. I actually got very good at this, then I stopped. If you need a great example (not my work) you can check out the famous \u003Ca href=\"https://www.spacejam.com/1996/\">Space Jam website\u003C/a>. If you want to see my work, here’s a \u003Ca href=\"http://mikesusz.com/sitemuseum/1996/\">copy of my website from 1996\u003C/a> (resize your browser - it’s \u003Cem>responsive!\u003C/em>) \u003Ca href=\"#user-content-fnref-tables\" data-footnote-backref=\"\" aria-label=\"Back to reference 28\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-tools\">\n\u003Cp>Tools I use every day: \u003Ca href=\"https://developer.mozilla.org/en-US/\">MDN\u003C/a>, \u003Ca href=\"https://caniuse.com/\">Can I Use\u003C/a>, \u003Ca href=\"https://developer.chrome.com/docs/lighthouse/overview\">Lighthouse in Chrome Dev Tools\u003C/a>, \u003Ca href=\"https://www.ibm.com/able/toolkit\">IBM Equal Access Toolkit/checker\u003C/a>, all the stuff I talked about \u003Ca href=\"/uses\">on my Uses page\u003C/a> \u003Ca href=\"#user-content-fnref-tools\" data-footnote-backref=\"\" aria-label=\"Back to reference 29\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-common\">\n\u003Cp>Common problems that thwart or frustrate users are probably things you’re familiar with: “oops this script didn’t load” or “oops that tracking gif didn’t load” or “oops there was a javascript error” does your website still… function? Have you experienced this as a user, how did it make you feel? \u003Ca href=\"#user-content-fnref-common\" data-footnote-backref=\"\" aria-label=\"Back to reference 30\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":206,"imagePaths":244,"frontmatter":245},[207,210,213,216,219,222,225,228,231,234,237,240,243],{"depth":61,"slug":208,"text":209},"we-have-to-go-back","We have to go back…",{"depth":74,"slug":211,"text":212},"when-i-first-saw-mosaic-everything-changed","When I first saw Mosaic, everything changed",{"depth":74,"slug":214,"text":215},"you-can-make-almost-anything-you-want","You can make (almost) anything you want",{"depth":74,"slug":217,"text":218},"standards","Standards",{"depth":61,"slug":220,"text":221},"back--to-the-future","Back … to The Future!",{"depth":74,"slug":223,"text":224},"and-the-outlook-is--not-great","And the outlook is … not great",{"depth":74,"slug":226,"text":227},"we-have-the-technology","We have the technology",{"depth":74,"slug":229,"text":230},"we-have-to-make-the-choice","We have to make the choice",{"depth":61,"slug":232,"text":233},"summary","Summary",{"depth":74,"slug":235,"text":236},"takeaways-or-tldr","Takeaways, or TL;DR:",{"depth":74,"slug":238,"text":239},"and-ultimately","And, Ultimately:",{"depth":61,"slug":241,"text":242},"image-credits","Image Credits:",{"depth":61,"slug":87,"text":88},[],{"title":196,"description":197,"pubDate":246,"draft":17,"heroImage":199,"heroAlt":196},"1 Aug 2024","dont-forget.md","thats-the-ticket",{"id":248,"data":250,"body":253,"filePath":254,"digest":255,"rendered":256,"legacyId":263},{"title":251,"description":251,"pubDate":252,"draft":52},"That's the Ticket",["Date","2024-07-29T04:00:00.000Z"],"In my work specifically -- as a developer in an enormous consulting organization in an enormous technology company -- the pressure we feel is all about time. Once a project bid is agreed to in contract - the fewer hours we actually bill to the client, the more profit the company makes.","src/content/blog/thats-the-ticket.md","5814d7cb4d582a39",{"html":257,"metadata":258},"\u003Cp>In my work specifically — as a developer in an enormous consulting organization in an enormous technology company — the pressure we feel is all about time. Once a project bid is agreed to in contract - the fewer hours we actually bill to the client, the more profit the company makes.\u003C/p>",{"headings":259,"imagePaths":260,"frontmatter":261},[],[],{"title":251,"description":251,"pubDate":262,"draft":52},"29 Jul 2024","thats-the-ticket.md","third-post",{"id":264,"data":266,"body":117,"filePath":269,"digest":270,"rendered":271,"legacyId":277},{"title":267,"description":114,"pubDate":268,"heroImage":116,"draft":52},"Third post",["Date","2022-07-15T04:00:00.000Z"],"src/content/blog/third-post.md","bd654fe4a8d869dd",{"html":121,"metadata":272},{"headings":273,"imagePaths":274,"frontmatter":275},[],[],{"title":267,"description":114,"pubDate":276,"heroImage":116,"draft":52},"Jul 15 2022","third-post.md","tailwind",{"id":278,"data":280,"body":284,"filePath":285,"digest":286,"rendered":287,"legacyId":294},{"title":281,"description":282,"pubDate":283,"draft":17},"Tailwind CSS","For my initial setup of this site, I wanted to try out using Tailwind CSS for the first time. I found it quick to learn and have fun working with!",["Date","2021-09-14T04:00:00.000Z"],"In an effort to learn new things outside my 'comfort zone' I had heard good things about building projects using [Tailwind CSS](https://tailwindcss.com/). This site \u003Cstrike>is\u003C/strike> was previously built with it!\n\nTailwild is built on the principle of using shorthand CSS classes to produce powerful rules and maintain consistency across elements. After an initial slight learning curve, as I worked with it I found myself being able to intuitively guess what shorthand codes I should use for the effects that I wanted.\n\nThis would probably be a great solution for projects like client websites, where another developer might take over and maintain the site in the future, and not have to mentally de-compile a mountain of custom CSS attributes assigned to semantically named class elements.\n\nFor this iteration of the site, I'd paired it for development with a lightweight local hot-reloading web server called [Live Server](http://tapiov.net/live-server/).","src/content/blog/tailwind.md","3f75c0c31b21cdbd",{"html":288,"metadata":289},"\u003Cp>In an effort to learn new things outside my ‘comfort zone’ I had heard good things about building projects using \u003Ca href=\"https://tailwindcss.com/\">Tailwind CSS\u003C/a>. This site \u003Cstrike>is\u003C/strike> was previously built with it!\u003C/p>\n\u003Cp>Tailwild is built on the principle of using shorthand CSS classes to produce powerful rules and maintain consistency across elements. After an initial slight learning curve, as I worked with it I found myself being able to intuitively guess what shorthand codes I should use for the effects that I wanted.\u003C/p>\n\u003Cp>This would probably be a great solution for projects like client websites, where another developer might take over and maintain the site in the future, and not have to mentally de-compile a mountain of custom CSS attributes assigned to semantically named class elements.\u003C/p>\n\u003Cp>For this iteration of the site, I’d paired it for development with a lightweight local hot-reloading web server called \u003Ca href=\"http://tapiov.net/live-server/\">Live Server\u003C/a>.\u003C/p>",{"headings":290,"imagePaths":291,"frontmatter":292},[],[],{"title":281,"description":282,"pubDate":293,"draft":17},"14 Sep 2021","tailwind.md","using-mdx",{"id":295,"data":297,"body":300,"filePath":301,"digest":302,"legacyId":303,"deferredRender":52},{"title":298,"description":114,"pubDate":299,"heroImage":116,"draft":52},"Using MDX",["Date","2022-07-02T04:00:00.000Z"],"This theme comes with the [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/) integration installed and configured in your `astro.config.mjs` config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.\n\n## Why MDX?\n\nMDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to [mix JavaScript and UI Components into your Markdown content](https://docs.astro.build/en/guides/markdown-content/#mdx-features) for things like interactive charts or alerts.\n\nIf you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.\n\n## Example\n\nHere is how you import and use a UI component inside of MDX.\nWhen you open this page in the browser, you should see the clickable button below.\n\nimport HeaderLink from '../../components/HeaderLink.astro';\n\n\u003CHeaderLink href=\"#\" onclick=\"alert('clicked!')\">\n\tEmbedded component in MDX\n\u003C/HeaderLink>\n\n## More Links\n\n- [MDX Syntax Documentation](https://mdxjs.com/docs/what-is-mdx)\n- [Astro Usage Documentation](https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages)\n- **Note:** [Client Directives](https://docs.astro.build/en/reference/directives-reference/#client-directives) are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.","src/content/blog/using-mdx.mdx","93cab01975cf9b6f","using-mdx.mdx","three-uns",{"id":304,"data":306,"body":310,"filePath":311,"digest":312,"rendered":313,"legacyId":332},{"title":307,"description":308,"pubDate":309,"draft":17},"The Three Uns","Why we don't do the things we should do.",["Date","2023-05-30T04:00:00.000Z"],"Having kids has changed me. In observing how they interact with the world, I see behaviors from them sometimes that I (for decades and decades) failed to see in myself, and therefore still struggle with today.\n\nOne of my kids has a difficult time _getting started_ doing things. Does this sound familiar? They’re not unhelpful, they’re not lazy, but they just can’t seem to get going on something, either important or trivial. But once they _get going_ they usually knock it out of the park.\n\nIs it a question of motivation? Sometimes I’ve found that my kid knows they should be doing something, but there’s something else that’s preventing them from making progress. As I’ve thought about this, I’ve distilled the lesson down to 3 points, I hope it helps them and you (and me).\n\nPlease note: this will not be a deep dive into motivation and productivity. There will also be no \"tips and tricks\" disbursed. This is simply an examination of the forces that keep us from starting, moving, and completing things.\n\nThere are three reasons people don’t do things. The Three Uns:\n\n_Unaware_, _Unable_, and _Unwilling_\n\n## Unaware ##\n\nIf you’re *Unaware* of what you’re supposed to do, you’ll never do it, unless incidentally. This is like a ticketing system that piles up tasks for you but you never get any notifications. Or, you’re part of a team with shared responsibilities, but haven't effectively delegated tasks, so there are things that everyone else is expecting you to take care of, but you’re oblivious. Unaware is usually a systematic problem that needs to be solved at a higher level or in a more holistic way.\n\nYou may be _involved_ in the solution to Unaware but you're not likely to be able to handle this on your own.\n\n## Unable ##\n\nSo okay, good, you’re aware of what’s being asked of you, but, you’re *Unable* to do it. This might be that you lack access to accounts or systems to complete a task, you are time-constrained and have higher priority work to finish, or maybe you’re being asked to do something that’s too far outside your ken.\n\nUnable is something which may need to be solved by a combination of external and internal restructuring — you need fewer tasks, you need your management to weigh in on priorities, you need more training or to swap tasks with someone so that you’ve got work that you're more familiar with.\n\n## Unwilling ##\n\nThe last of the three is different. This is the one I deal with the most when trying to help my kids (and frankly, probably myself) and that is _Unwilling_. You know what you’re being asked to do, you know how to do it and have access to all the resources that you need to be successful, you just can't seem to (begin/complete) it.\n\nUnwilling is far more difficult to deal with, and the causes and solutions are usually more personal. What I find most helpful is to have a literal discussion with myself: why have I not (started/finished) this thing? This inner dialogue will usually identify the source of the friction that is preventing progress.\n\n## So, how to get better? ##\n\nMotivation would be another entire article (one that I'm currently writing!) but what I hoped to establish here is a pattern of thinking that you can use for yourself or those around you when you realize something isn't done:\n\n- Are they/I Unaware of the task?\n- Are they/I Unable to complete the task due to some roadblock?\n- Are they/I just simply Unwilling to get going on it, due to whatever motivational challenges are present?\n\nApplying this to unfinished (or unstarted) projects around you, in such stark terms, might help you to quantify the effort or resources left to complete something.\n\nAnd a sneaky \"turns out\" moment: by performing this exercise to identify and eliminate these invisible barriers, you might find the motivation to help you push past Unwilling and make real progress!","src/content/blog/three-uns.md","47790ab6361accac",{"html":314,"metadata":315},"\u003Cp>Having kids has changed me. In observing how they interact with the world, I see behaviors from them sometimes that I (for decades and decades) failed to see in myself, and therefore still struggle with today.\u003C/p>\n\u003Cp>One of my kids has a difficult time \u003Cem>getting started\u003C/em> doing things. Does this sound familiar? They’re not unhelpful, they’re not lazy, but they just can’t seem to get going on something, either important or trivial. But once they \u003Cem>get going\u003C/em> they usually knock it out of the park.\u003C/p>\n\u003Cp>Is it a question of motivation? Sometimes I’ve found that my kid knows they should be doing something, but there’s something else that’s preventing them from making progress. As I’ve thought about this, I’ve distilled the lesson down to 3 points, I hope it helps them and you (and me).\u003C/p>\n\u003Cp>Please note: this will not be a deep dive into motivation and productivity. There will also be no “tips and tricks” disbursed. This is simply an examination of the forces that keep us from starting, moving, and completing things.\u003C/p>\n\u003Cp>There are three reasons people don’t do things. The Three Uns:\u003C/p>\n\u003Cp>\u003Cem>Unaware\u003C/em>, \u003Cem>Unable\u003C/em>, and \u003Cem>Unwilling\u003C/em>\u003C/p>\n\u003Ch2 id=\"unaware\">Unaware\u003C/h2>\n\u003Cp>If you’re \u003Cem>Unaware\u003C/em> of what you’re supposed to do, you’ll never do it, unless incidentally. This is like a ticketing system that piles up tasks for you but you never get any notifications. Or, you’re part of a team with shared responsibilities, but haven’t effectively delegated tasks, so there are things that everyone else is expecting you to take care of, but you’re oblivious. Unaware is usually a systematic problem that needs to be solved at a higher level or in a more holistic way.\u003C/p>\n\u003Cp>You may be \u003Cem>involved\u003C/em> in the solution to Unaware but you’re not likely to be able to handle this on your own.\u003C/p>\n\u003Ch2 id=\"unable\">Unable\u003C/h2>\n\u003Cp>So okay, good, you’re aware of what’s being asked of you, but, you’re \u003Cem>Unable\u003C/em> to do it. This might be that you lack access to accounts or systems to complete a task, you are time-constrained and have higher priority work to finish, or maybe you’re being asked to do something that’s too far outside your ken.\u003C/p>\n\u003Cp>Unable is something which may need to be solved by a combination of external and internal restructuring — you need fewer tasks, you need your management to weigh in on priorities, you need more training or to swap tasks with someone so that you’ve got work that you’re more familiar with.\u003C/p>\n\u003Ch2 id=\"unwilling\">Unwilling\u003C/h2>\n\u003Cp>The last of the three is different. This is the one I deal with the most when trying to help my kids (and frankly, probably myself) and that is \u003Cem>Unwilling\u003C/em>. You know what you’re being asked to do, you know how to do it and have access to all the resources that you need to be successful, you just can’t seem to (begin/complete) it.\u003C/p>\n\u003Cp>Unwilling is far more difficult to deal with, and the causes and solutions are usually more personal. What I find most helpful is to have a literal discussion with myself: why have I not (started/finished) this thing? This inner dialogue will usually identify the source of the friction that is preventing progress.\u003C/p>\n\u003Ch2 id=\"so-how-to-get-better\">So, how to get better?\u003C/h2>\n\u003Cp>Motivation would be another entire article (one that I’m currently writing!) but what I hoped to establish here is a pattern of thinking that you can use for yourself or those around you when you realize something isn’t done:\u003C/p>\n\u003Cul>\n\u003Cli>Are they/I Unaware of the task?\u003C/li>\n\u003Cli>Are they/I Unable to complete the task due to some roadblock?\u003C/li>\n\u003Cli>Are they/I just simply Unwilling to get going on it, due to whatever motivational challenges are present?\u003C/li>\n\u003C/ul>\n\u003Cp>Applying this to unfinished (or unstarted) projects around you, in such stark terms, might help you to quantify the effort or resources left to complete something.\u003C/p>\n\u003Cp>And a sneaky “turns out” moment: by performing this exercise to identify and eliminate these invisible barriers, you might find the motivation to help you push past Unwilling and make real progress!\u003C/p>",{"headings":316,"imagePaths":329,"frontmatter":330},[317,320,323,326],{"depth":61,"slug":318,"text":319},"unaware","Unaware",{"depth":61,"slug":321,"text":322},"unable","Unable",{"depth":61,"slug":324,"text":325},"unwilling","Unwilling",{"depth":61,"slug":327,"text":328},"so-how-to-get-better","So, how to get better?",[],{"title":307,"description":308,"pubDate":331,"draft":17},"30 May 2023","three-uns.md","who-did-this",{"id":333,"data":335,"body":340,"filePath":341,"digest":342,"rendered":343,"legacyId":387},{"title":336,"description":337,"pubDate":338,"heroImage":339,"heroAlt":336,"draft":17},"Who Did This?","How we got to the AI present",["Date","2025-02-16T05:00:00.000Z"],"/images/who-did-this-1.webp","In a lot of ways, the explosive growth of AI was forseeable. Where we go from here ... is up to us.\n\n## How did we get here?\n\n\u003C!-- it used to be difficult -->\n\nI want to spare you another [long nostalgic screed](/blog/dont-forget), so let us just say that publishing content on the web used to be _laborious_. The technical knowledge to make 'web pages' was a barrier for a lot of diverse opinions being put forth for public consumption. Only the most adept nerds could express their opinions online in the early days! _(source: I am an adept nerd with bad opinions, expressed online in the early days)_\n\nAnd once content was on the 'web' how do you find it? Before search engines and aggregators, this, too was a chore. Maybe a friend would share something interesting with you. Maybe you saw it linked somewhere. A URL on a piece of paper on a bulletin board at a library. Finding things that interested you was tough, and bookmarks were very important!\n\nSo blogs, right? Or updated home-pages. What was published was long-form writing, usually. Back then we actually had time to write and read pages of content (or at least posts on [usenet](https://en.wikipedia.org/wiki/Usenet)) because, frankly, we didn't have tons of other stuff to do 'online.'\n\n## Hold on to your butts\n\n\u003C!-- now it's easy -->\n\nTechnology would arise to change the dynamics of who can publish. And that's great! blogging sites and software helped to remove the technical barriers to publishing. Not to ~~make you feel old~~ bog this down with statistics, but: Blogger was launched in 1999, WordPress in 2003, Youtube in 2005, Tumblr in 2007, Medium in 2012.\n\nThe diversity of opinionated content available is vast. The nerds are no longer that digital gatekeepers of expressing yourself online (although some seem to be pretty mad about it).\n\nSo now everyone can post content! And they do. They just keep posting. It's a lot. Every commercial and public interest has a web presence. And the services that enable you to express yourself are exploding also, having an exponential effect.\n\n## Oh no that's too much\n\n\u003C!-- oh no that's too much -->\n\nSo now we need trusted sources to filter through all this. Perhaps you have a friend who knows about a certain topic. Or you luck yourself into finding a linkblogger who shares your tastes and you can follow their direction to content written on the topics that interest you.\n\nThe problem is, those people don't scale. And their tastes and interests can diverge from yours, making the pairing become less tenable. You can't ask [Jason Kottke](https://kottke.org/) to suddenly get really into Himalayan sweaters or arm32 processors (honestly I tried finding topics that Kottke _hasn't_ written about and I ... really can't find many)\n\n\u003C!-- no not like that (you don't get to choose your arbiter) -->\n\n## Rise of the machines\n\nThe solution to tailoring the discovery and aggregation of content to every individual, is to have that individual enter their preferences into a machine.[^AltaVista] You have been doing this since you started using search engines, they've just gotten better at remembering you and what you like.\n\n(this is good and bad)\n\nIn addition to remembering you and what you like, they're remembering people who are similar to you, and what they like.\n\n(this is probably mostly bad)\n\n![baton roue frame 2](/images/who-did-this-2.webp)\n\n## Servers cost money\n\nHosting search engines costs money. (new Porsches cost money also). So search engine companies have to make money by spying on what you like, and selling that data to advertisers. At first this wasn't really creepy, until... they started taking input &amp; direction _from_ those advertisers to show you things the advertisers wanted you to see.\n\nThis is the mostly bad part I mentioned - the search engine advertisers become like all other advertisers, and want to influence what you see.\n\n## People need to eat\n\nThe other side of this is, the people producing the content aren't writing this in their spare time as they sit alone in their rented room surrounded by computers instead of friends (source: it me[^me]). People who are putting more time into creating quality content, naturally want to get paid for it. Attempts to create micro-payment networks based on consumption have largely failed, so avertising has become the primary revenue stream for people who make content.\n\nThe more and higher you show up in search results, the more clicks you receive, the more ads get seen with your content, the more money you make (in theory). So it became a game of steering their content to the search engines themselves, and that usually means changing their content to be less desirable for humans.\n\nExample: how many times have you searched for a recipe, to find one on a blog that ends up being woven into a yarn spun about their grandma and where their grandma grew up and how their grandma taught them to make these biscuits when they were knee-high to a grasshopper and...\n\nMonetization and Search-Engine Optimization shape the content being produced to appeal to machines, not busy humans.\n\n## This time he's back, for good?\n\nTwo references to The Terminator movies in the same blog post? Let's do this.\n\n \u003C!-- SO NOW WHAT -->\n\nWhen is the last time you read a long-form blog post? An entire news article? Can you even remember?\n\nAttention spans are shrunk and our ability to carve out and justify time to read long-form works is more and more difficult. Nevermind if you're trying to find information for some sort of urgent cause.\n\n\"I just want the recipe!\" \"Just tell me the one simple trick!\" \"No really, is this plant poisonous to dogs???\"\n\nOur desires have steered technology yet again. We don't want to sift through the rambling cascade of inane paragraphs. We want to drill down to what's specific and valuable about this content. And we may want to do this on multiple sites, and compare the results to formulate a concensus opinion about something. You know what does that a lot faster? AI.\n\n![baton roue frame 3](/images/who-did-this-3.webp)[^BatonRoue]\n\nDoes it get everything right every time? No. Does it give you a reasonable answer in a reasonable amount of time? Yes. Are you free to go further and dig deeper into primary sources if something is really important? Also yes.\n\n## We did this\n\nOur consumption habits and behavior patterns have coincided with the development of technology, to drive AI aggregation, summarization and reshaping of data. Our brains want the nugget -- the tweet, the toot, the snap, the insta. Meanwhile, advertising-driven content creators make SEO-friendly articles full of cruft. We've asked (the void) to remove the cruft, and AI has done so.\n\n![spidermen pointing](/images/pointing.webp)\n\n## What is next\n\nWhat comes next is largely up to us also. Will we continue to use AI to seek out information? Probably. Will we regress to linkblogs, directories and webrings? Not likely.\n\nThe things that will drive what comes next are all about the same incentivizing factors that built the web before AI.\n\n### How will (AI) make any money?\n\nAI is incredibly expensive to train, yet we're in a honeymoon-phase where they're giving us the results for free. They have to have a plan for this to be viable, and even profitable. Will every chat-whatever interface be full of advertising? Are they collecting data about your habits and preferences to sell to advertisers on traditional web-based media and apps?\n\n### How will creators react?\n\nHow can people who produce content continue to get paid in a world where their knowledge is harvested, processed, and distributed without the primary source being credited? Will people move all their content inside of walled gardens, or onto platforms that can deflect being used for AI training? If this happens, will we have the same difficulty with discoverability that we had in the 90s?\n\n## It can't be all bad\n\nTrue, this will sound like pale consolation. But what we've learned from decades of technological evolution is that things will change only as much as we tolerate it. If search engine _A_ gives us too much AI and hides primary sources, the people who want to dig deeper will go elsewhere. If social media company _X_ wants to steal our content and make it difficult to find our friends, users will flock to other platforms.\n\nPeople have dealt with these types of trends well before the internet. (does anyone remember \"the invisible hand\"[^InvisibleHand] from Economics class?). Consumer preferences will drive the direction of technology, because consumption drives revenue. What form that revenue takes and/or how it's transfered (e.g. from users to advertisers to search engines) has yet to be fully developed, but we will see it come to pass if the tech companies ever want to make money off of their huge investment.\n\nKeep making the choices that are best for you and the people you care about, and the economy-of-information will be steered by your preferences.\n\n---\n\n[^AltaVista]: okay maybe i'm still a little mad about how i can't show off my prowess in crafting precise queries in AltaVista anymore ([this is the best guide i can find from those days](https://jkorpela.fi/altavista/) and, wow, I wasn't even scratching the surface).\n\n[^me]: here's your treat (or punishment) for reading the footnotes. in 1999, i was renting a bedroom in a house in Newton, Massachusetts. We had a MediaOne cable modem - 8 megabits! And i had no less than three computers running most of the time. And i got a logitech webcam, because, why not i guess? so [here you go](/images/me.1999.jpg)\n\n[^BatonRoue]: the three images of the bicyclist with the stick are taken from a meme based on a piece of art called 'Baton Roue' by french artist Corentin Penloup. [view the full version here](/images/who-did-this-full.webp) or you can find out more [at the KnowYourMeme page about Baton Roue](https://knowyourmeme.com/memes/baton-roue).\n\n[^InvisibleHand]: I knew that stuff about Adam Smith would come in handy again someday. [Further reading at Investopedia](https://www.investopedia.com/terms/i/invisiblehand.asp).","src/content/blog/who-did-this.md","171390a91bcdc06f",{"html":344,"metadata":345},"\u003Cp>In a lot of ways, the explosive growth of AI was forseeable. Where we go from here … is up to us.\u003C/p>\n\u003Ch2 id=\"how-did-we-get-here\">How did we get here?\u003C/h2>\n\u003C!-- it used to be difficult -->\n\u003Cp>I want to spare you another \u003Ca href=\"/blog/dont-forget\">long nostalgic screed\u003C/a>, so let us just say that publishing content on the web used to be \u003Cem>laborious\u003C/em>. The technical knowledge to make ‘web pages’ was a barrier for a lot of diverse opinions being put forth for public consumption. Only the most adept nerds could express their opinions online in the early days! \u003Cem>(source: I am an adept nerd with bad opinions, expressed online in the early days)\u003C/em>\u003C/p>\n\u003Cp>And once content was on the ‘web’ how do you find it? Before search engines and aggregators, this, too was a chore. Maybe a friend would share something interesting with you. Maybe you saw it linked somewhere. A URL on a piece of paper on a bulletin board at a library. Finding things that interested you was tough, and bookmarks were very important!\u003C/p>\n\u003Cp>So blogs, right? Or updated home-pages. What was published was long-form writing, usually. Back then we actually had time to write and read pages of content (or at least posts on \u003Ca href=\"https://en.wikipedia.org/wiki/Usenet\">usenet\u003C/a>) because, frankly, we didn’t have tons of other stuff to do ‘online.‘\u003C/p>\n\u003Ch2 id=\"hold-on-to-your-butts\">Hold on to your butts\u003C/h2>\n\u003C!-- now it's easy -->\n\u003Cp>Technology would arise to change the dynamics of who can publish. And that’s great! blogging sites and software helped to remove the technical barriers to publishing. Not to \u003Cdel>make you feel old\u003C/del> bog this down with statistics, but: Blogger was launched in 1999, WordPress in 2003, Youtube in 2005, Tumblr in 2007, Medium in 2012.\u003C/p>\n\u003Cp>The diversity of opinionated content available is vast. The nerds are no longer that digital gatekeepers of expressing yourself online (although some seem to be pretty mad about it).\u003C/p>\n\u003Cp>So now everyone can post content! And they do. They just keep posting. It’s a lot. Every commercial and public interest has a web presence. And the services that enable you to express yourself are exploding also, having an exponential effect.\u003C/p>\n\u003Ch2 id=\"oh-no-thats-too-much\">Oh no that’s too much\u003C/h2>\n\u003C!-- oh no that's too much -->\n\u003Cp>So now we need trusted sources to filter through all this. Perhaps you have a friend who knows about a certain topic. Or you luck yourself into finding a linkblogger who shares your tastes and you can follow their direction to content written on the topics that interest you.\u003C/p>\n\u003Cp>The problem is, those people don’t scale. And their tastes and interests can diverge from yours, making the pairing become less tenable. You can’t ask \u003Ca href=\"https://kottke.org/\">Jason Kottke\u003C/a> to suddenly get really into Himalayan sweaters or arm32 processors (honestly I tried finding topics that Kottke \u003Cem>hasn’t\u003C/em> written about and I … really can’t find many)\u003C/p>\n\u003C!-- no not like that (you don't get to choose your arbiter) -->\n\u003Ch2 id=\"rise-of-the-machines\">Rise of the machines\u003C/h2>\n\u003Cp>The solution to tailoring the discovery and aggregation of content to every individual, is to have that individual enter their preferences into a machine.\u003Csup>\u003Ca href=\"#user-content-fn-altavista\" id=\"user-content-fnref-altavista\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup> You have been doing this since you started using search engines, they’ve just gotten better at remembering you and what you like.\u003C/p>\n\u003Cp>(this is good and bad)\u003C/p>\n\u003Cp>In addition to remembering you and what you like, they’re remembering people who are similar to you, and what they like.\u003C/p>\n\u003Cp>(this is probably mostly bad)\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/who-did-this-2.webp\" alt=\"baton roue frame 2\">\u003C/p>\n\u003Ch2 id=\"servers-cost-money\">Servers cost money\u003C/h2>\n\u003Cp>Hosting search engines costs money. (new Porsches cost money also). So search engine companies have to make money by spying on what you like, and selling that data to advertisers. At first this wasn’t really creepy, until… they started taking input &#x26; direction \u003Cem>from\u003C/em> those advertisers to show you things the advertisers wanted you to see.\u003C/p>\n\u003Cp>This is the mostly bad part I mentioned - the search engine advertisers become like all other advertisers, and want to influence what you see.\u003C/p>\n\u003Ch2 id=\"people-need-to-eat\">People need to eat\u003C/h2>\n\u003Cp>The other side of this is, the people producing the content aren’t writing this in their spare time as they sit alone in their rented room surrounded by computers instead of friends (source: it me\u003Csup>\u003Ca href=\"#user-content-fn-me\" id=\"user-content-fnref-me\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup>). People who are putting more time into creating quality content, naturally want to get paid for it. Attempts to create micro-payment networks based on consumption have largely failed, so avertising has become the primary revenue stream for people who make content.\u003C/p>\n\u003Cp>The more and higher you show up in search results, the more clicks you receive, the more ads get seen with your content, the more money you make (in theory). So it became a game of steering their content to the search engines themselves, and that usually means changing their content to be less desirable for humans.\u003C/p>\n\u003Cp>Example: how many times have you searched for a recipe, to find one on a blog that ends up being woven into a yarn spun about their grandma and where their grandma grew up and how their grandma taught them to make these biscuits when they were knee-high to a grasshopper and…\u003C/p>\n\u003Cp>Monetization and Search-Engine Optimization shape the content being produced to appeal to machines, not busy humans.\u003C/p>\n\u003Ch2 id=\"this-time-hes-back-for-good\">This time he’s back, for good?\u003C/h2>\n\u003Cp>Two references to The Terminator movies in the same blog post? Let’s do this.\u003C/p>\n \u003C!-- SO NOW WHAT -->\n\u003Cp>When is the last time you read a long-form blog post? An entire news article? Can you even remember?\u003C/p>\n\u003Cp>Attention spans are shrunk and our ability to carve out and justify time to read long-form works is more and more difficult. Nevermind if you’re trying to find information for some sort of urgent cause.\u003C/p>\n\u003Cp>“I just want the recipe!” “Just tell me the one simple trick!” “No really, is this plant poisonous to dogs???”\u003C/p>\n\u003Cp>Our desires have steered technology yet again. We don’t want to sift through the rambling cascade of inane paragraphs. We want to drill down to what’s specific and valuable about this content. And we may want to do this on multiple sites, and compare the results to formulate a concensus opinion about something. You know what does that a lot faster? AI.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/who-did-this-3.webp\" alt=\"baton roue frame 3\">\u003Csup>\u003Ca href=\"#user-content-fn-batonroue\" id=\"user-content-fnref-batonroue\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">3\u003C/a>\u003C/sup>\u003C/p>\n\u003Cp>Does it get everything right every time? No. Does it give you a reasonable answer in a reasonable amount of time? Yes. Are you free to go further and dig deeper into primary sources if something is really important? Also yes.\u003C/p>\n\u003Ch2 id=\"we-did-this\">We did this\u003C/h2>\n\u003Cp>Our consumption habits and behavior patterns have coincided with the development of technology, to drive AI aggregation, summarization and reshaping of data. Our brains want the nugget — the tweet, the toot, the snap, the insta. Meanwhile, advertising-driven content creators make SEO-friendly articles full of cruft. We’ve asked (the void) to remove the cruft, and AI has done so.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/pointing.webp\" alt=\"spidermen pointing\">\u003C/p>\n\u003Ch2 id=\"what-is-next\">What is next\u003C/h2>\n\u003Cp>What comes next is largely up to us also. Will we continue to use AI to seek out information? Probably. Will we regress to linkblogs, directories and webrings? Not likely.\u003C/p>\n\u003Cp>The things that will drive what comes next are all about the same incentivizing factors that built the web before AI.\u003C/p>\n\u003Ch3 id=\"how-will-ai-make-any-money\">How will (AI) make any money?\u003C/h3>\n\u003Cp>AI is incredibly expensive to train, yet we’re in a honeymoon-phase where they’re giving us the results for free. They have to have a plan for this to be viable, and even profitable. Will every chat-whatever interface be full of advertising? Are they collecting data about your habits and preferences to sell to advertisers on traditional web-based media and apps?\u003C/p>\n\u003Ch3 id=\"how-will-creators-react\">How will creators react?\u003C/h3>\n\u003Cp>How can people who produce content continue to get paid in a world where their knowledge is harvested, processed, and distributed without the primary source being credited? Will people move all their content inside of walled gardens, or onto platforms that can deflect being used for AI training? If this happens, will we have the same difficulty with discoverability that we had in the 90s?\u003C/p>\n\u003Ch2 id=\"it-cant-be-all-bad\">It can’t be all bad\u003C/h2>\n\u003Cp>True, this will sound like pale consolation. But what we’ve learned from decades of technological evolution is that things will change only as much as we tolerate it. If search engine \u003Cem>A\u003C/em> gives us too much AI and hides primary sources, the people who want to dig deeper will go elsewhere. If social media company \u003Cem>X\u003C/em> wants to steal our content and make it difficult to find our friends, users will flock to other platforms.\u003C/p>\n\u003Cp>People have dealt with these types of trends well before the internet. (does anyone remember “the invisible hand”\u003Csup>\u003Ca href=\"#user-content-fn-invisiblehand\" id=\"user-content-fnref-invisiblehand\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">4\u003C/a>\u003C/sup> from Economics class?). Consumer preferences will drive the direction of technology, because consumption drives revenue. What form that revenue takes and/or how it’s transfered (e.g. from users to advertisers to search engines) has yet to be fully developed, but we will see it come to pass if the tech companies ever want to make money off of their huge investment.\u003C/p>\n\u003Cp>Keep making the choices that are best for you and the people you care about, and the economy-of-information will be steered by your preferences.\u003C/p>\n\u003Chr>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-altavista\">\n\u003Cp>okay maybe i’m still a little mad about how i can’t show off my prowess in crafting precise queries in AltaVista anymore (\u003Ca href=\"https://jkorpela.fi/altavista/\">this is the best guide i can find from those days\u003C/a> and, wow, I wasn’t even scratching the surface). \u003Ca href=\"#user-content-fnref-altavista\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-me\">\n\u003Cp>here’s your treat (or punishment) for reading the footnotes. in 1999, i was renting a bedroom in a house in Newton, Massachusetts. We had a MediaOne cable modem - 8 megabits! And i had no less than three computers running most of the time. And i got a logitech webcam, because, why not i guess? so \u003Ca href=\"/images/me.1999.jpg\">here you go\u003C/a> \u003Ca href=\"#user-content-fnref-me\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-batonroue\">\n\u003Cp>the three images of the bicyclist with the stick are taken from a meme based on a piece of art called ‘Baton Roue’ by french artist Corentin Penloup. \u003Ca href=\"/images/who-did-this-full.webp\">view the full version here\u003C/a> or you can find out more \u003Ca href=\"https://knowyourmeme.com/memes/baton-roue\">at the KnowYourMeme page about Baton Roue\u003C/a>. \u003Ca href=\"#user-content-fnref-batonroue\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-invisiblehand\">\n\u003Cp>I knew that stuff about Adam Smith would come in handy again someday. \u003Ca href=\"https://www.investopedia.com/terms/i/invisiblehand.asp\">Further reading at Investopedia\u003C/a>. \u003Ca href=\"#user-content-fnref-invisiblehand\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":346,"imagePaths":384,"frontmatter":385},[347,350,353,356,359,362,365,368,371,374,377,380,383],{"depth":61,"slug":348,"text":349},"how-did-we-get-here","How did we get here?",{"depth":61,"slug":351,"text":352},"hold-on-to-your-butts","Hold on to your butts",{"depth":61,"slug":354,"text":355},"oh-no-thats-too-much","Oh no that’s too much",{"depth":61,"slug":357,"text":358},"rise-of-the-machines","Rise of the machines",{"depth":61,"slug":360,"text":361},"servers-cost-money","Servers cost money",{"depth":61,"slug":363,"text":364},"people-need-to-eat","People need to eat",{"depth":61,"slug":366,"text":367},"this-time-hes-back-for-good","This time he’s back, for good?",{"depth":61,"slug":369,"text":370},"we-did-this","We did this",{"depth":61,"slug":372,"text":373},"what-is-next","What is next",{"depth":74,"slug":375,"text":376},"how-will-ai-make-any-money","How will (AI) make any money?",{"depth":74,"slug":378,"text":379},"how-will-creators-react","How will creators react?",{"depth":61,"slug":381,"text":382},"it-cant-be-all-bad","It can’t be all bad",{"depth":61,"slug":87,"text":88},[],{"title":336,"description":337,"pubDate":386,"draft":17,"heroImage":339,"heroAlt":336},"16 Feb 2025","who-did-this.md"]